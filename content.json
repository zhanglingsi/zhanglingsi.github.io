{"meta":{"title":"EthenのBlog","subtitle":"记录工作学习的日志及遇到问题的解决方案","description":"做自己爱做的事，爱自己在做的事！","author":"Ethen","url":"http://zhanglingsi.github.io"},"pages":[{"title":"","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"404.html","permalink":"http://zhanglingsi.github.io/404.html","excerpt":"","text":""},{"title":"All about","date":"2018-03-19T02:35:22.000Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"about/index.html","permalink":"http://zhanglingsi.github.io/about/index.html","excerpt":"","text":""},{"title":"All categories","date":"2018-03-19T02:34:57.000Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"categories/index.html","permalink":"http://zhanglingsi.github.io/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2018-03-19T02:32:51.000Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"tags/index.html","permalink":"http://zhanglingsi.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Dozer工具类使用-属性复制框架","slug":"Dozer工具类使用-属性复制框架","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/Dozer工具类使用-属性复制框架.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/Dozer工具类使用-属性复制框架.html","excerpt":"Dozer工具类使用-属性复制框架Quick StartDozer配置[Maven]12345&lt;dependency&gt; &lt;groupId&gt;net.sf.dozer&lt;/groupId&gt; &lt;artifactId&gt;dozer&lt;/artifactId&gt; &lt;version&gt;5.4.0&lt;/version&gt;&lt;/dependency&gt; [官方文档] (http://dozer.sourceforge.net/documentation/about.html)","text":"Dozer工具类使用-属性复制框架Quick StartDozer配置[Maven]12345&lt;dependency&gt; &lt;groupId&gt;net.sf.dozer&lt;/groupId&gt; &lt;artifactId&gt;dozer&lt;/artifactId&gt; &lt;version&gt;5.4.0&lt;/version&gt;&lt;/dependency&gt; [官方文档] (http://dozer.sourceforge.net/documentation/about.html) 第一个示例 Map转换JavaBean假设由request得到了页面参数map，想将其转为领域对象–Product。Product有如下几个属性：private Long id;private String name;private String description;12345678910Map&lt;String,Object&gt; map = Maps.newHashMap();map.put(\"id\", 10001L);map.put(\"name\", \"张三\");map.put(\"description\", \"吉祥如意\");DozerBeanMapper mapper = new DozerBeanMapper();Product product = mapper.map(map, Product.class);assertThat(product.getId()).isEqualTo(10001);assertThat(product.getName()).isEqualTo(\"张三\");assertThat(product.getDescription()).isEqualTo(\"吉祥如意\"); 第二个示例 JavaBean转换DTO如下定义了一个DTO对象，但属性名并不匹配Product对象中的属性名，如下所示： 123private long productId;private String productName;private String desc; 这时简单的在相关属性上加一个注解即可，如下所示：12345678910111213141516171819@Mapping(\"id\")private long productId;@Mapping(\"name\")private String productName;@Mapping(\"description\")private String desc;完整代码示例见：Product product = new Product();product.setId(10201L);product.setName(\"Ethen\");product.setDescription(\"吉祥如意\");DozerBeanMapper mapper = new DozerBeanMapper();ProductDTO productDTO = mapper.map(product, ProductDTO.class);assertThat(productDTO.getProductId()).isEqualTo(10201L);assertThat(productDTO.getProductName()).isEqualTo(\"Ethen\");assertThat(productDTO.getDesc()).isEqualTo(\"吉祥如意\"); 附：工具类完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165/** * &lt;ul&gt; * &lt;li&gt;简单封装Dozer, 实现深度转换Bean&lt;-&gt;Bean的Mapper.实现:&lt;/li&gt; * &lt;li&gt;1、持有Mapper的单例.&lt;/li&gt; * &lt;li&gt;2、泛型返回值转换.&lt;/li&gt; * &lt;li&gt;3、批量转换Collection中的所有对象.&lt;/li&gt; * &lt;li&gt;4、区分创建新的B对象与将对象A值复制到已存在的B对象两种函数.&lt;/li&gt; * &lt;/ul&gt; */public class BeanCopier &#123; /** * 持有Dozer单例, 避免重复创建DozerMapper消耗资源. */ private static DozerBeanMapper dozer = new DozerBeanMapper(); /** * 基于Dozer转换对象的类型. */ public static &lt;T&gt; T copy(Object source, Class&lt;T&gt; destinationClass) &#123; if(source == null)&#123; return null; &#125; return dozer.map(source, destinationClass); &#125; /** * 基于Dozer将对象A的值拷贝到对象B中. */ public static void copy(Object source, Object destinationObject) &#123; if(source != null) &#123; dozer.map(source, destinationObject); &#125; &#125; public static &lt;T&gt; List&lt;T&gt; mapList(Collection sourceList, Class&lt;T&gt; destinationClass) &#123; List destinationList = Lists.newArrayList(); for (Iterator i$ = sourceList.iterator(); i$.hasNext(); ) &#123; Object sourceObject = i$.next(); Object destinationObject = dozer.map(sourceObject, destinationClass); destinationList.add(destinationObject); &#125; return destinationList; &#125; /** * 将源集合转换为目标集合,注意:目标集合是新建的 * @param &lt;T&gt; * @param srcList 源集合 * @param descType 目标集合中元素的类型 * @return */ public static &lt;T&gt; List&lt;T&gt; copyList(List srcList, Class&lt;T&gt; descType)&#123; if(srcList == null)&#123; return null; &#125; List&lt;T&gt; descList = Lists.newArrayList(); for(Object obj : srcList)&#123; T t = copy(obj, descType); descList.add(t); &#125; return descList; &#125; public static &lt;T&gt; Map&lt;String, T&gt; toMap(Object target) &#123; return toMap(target,false); &#125; /** * 将目标对象的所有属性转换成Map对象 * * @param target 目标对象 * @param ignoreParent 是否忽略父类的属性 * * @return Map */ public static &lt;T&gt; Map&lt;String, T&gt; toMap(Object target,boolean ignoreParent) &#123; return toMap(target,ignoreParent,false); &#125; /** * 将目标对象的所有属性转换成Map对象 * * @param target 目标对象 * @param ignoreParent 是否忽略父类的属性 * @param ignoreEmptyValue 是否不把空值添加到Map中 * * @return Map */ public static &lt;T&gt; Map&lt;String, T&gt; toMap(Object target,boolean ignoreParent,boolean ignoreEmptyValue) &#123; return toMap(target,ignoreParent,ignoreEmptyValue,new String[0]); &#125; public static List&lt;Field&gt; getFields(Class&lt;?&gt; clazz, Boolean ignoreParent) &#123; Field[] fields = null; if (ignoreParent)&#123; //获得某个类的所有声明的字段，即包括public、private和proteced，但是不包括父类的申明字段。 fields = clazz.getDeclaredFields(); &#125;else&#123; //获得某个类的所有的公共（public）的字段，包括父类中的字段。 fields = clazz.getFields(); &#125; int len = fields.length; List&lt;Field&gt; list = Lists.newArrayList(); for (int i = 0; i &lt; len; i++) &#123; list.add(fields[i]); &#125; return list; &#125; /** * 将目标对象的所有属性转换成Map对象 * * @param target 目标对象 * @param ignoreParent 是否忽略父类的属性 * @param ignoreEmptyValue 是否不把空值添加到Map中 * @param ignoreProperties 不需要添加到Map的属性名 */ public static &lt;T&gt; Map&lt;String, T&gt; toMap(Object target,boolean ignoreParent,boolean ignoreEmptyValue,String... ignoreProperties) &#123; Map&lt;String, T&gt; map = new HashMap&lt;String, T&gt;(); List&lt;Field&gt; fields = getFields(target.getClass(), ignoreParent); for (Iterator&lt;Field&gt; it = fields.iterator(); it.hasNext();) &#123; Field field = it.next(); T value = null; try &#123; value = (T) field.get(target); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; if (ignoreEmptyValue &amp;&amp; ((value == null || value.toString().equals(\"\")) || (value instanceof Collection &amp;&amp; ((Collection&lt;?&gt;) value).isEmpty()) || (value instanceof Map &amp;&amp; ((Map&lt;?,?&gt;)value).isEmpty()))) &#123; continue; &#125; boolean flag = true; String key = field.getName(); for (String ignoreProperty:ignoreProperties) &#123; if (key.equals(ignoreProperty)) &#123; flag = false; break; &#125; &#125; if (flag) &#123; map.put(key, value); &#125; &#125; return map; &#125;&#125;","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"Java对象校验框架之Oval-VerifyUtil","slug":"Java对象校验框架之Oval-VerifyUtil","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/Java对象校验框架之Oval-VerifyUtil.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/Java对象校验框架之Oval-VerifyUtil.html","excerpt":"Java对象校验框架之Oval-VerifyUtilQuick StartOval框架[Maven]12345&lt;dependency&gt; &lt;groupId&gt;net.sf.oval&lt;/groupId&gt; &lt;artifactId&gt;oval&lt;/artifactId&gt; &lt;version&gt;1.81&lt;/version&gt;&lt;/dependency&gt; [官方文档] (http://dozer.sourceforge.net/documentation/about.html)","text":"Java对象校验框架之Oval-VerifyUtilQuick StartOval框架[Maven]12345&lt;dependency&gt; &lt;groupId&gt;net.sf.oval&lt;/groupId&gt; &lt;artifactId&gt;oval&lt;/artifactId&gt; &lt;version&gt;1.81&lt;/version&gt;&lt;/dependency&gt; [官方文档] (http://dozer.sourceforge.net/documentation/about.html) VerifyUtil.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import lombok.extern.slf4j.Slf4j;import net.sf.oval.ConstraintViolation;import net.sf.oval.Validator;import java.lang.reflect.Field;import java.util.List;/** * Created by Administrator on 2017-01-02. */@Slf4jpublic class VerifyUtil &#123; private static Validator validator = new Validator(); public static void validateObject(Object object) &#123; List&lt;ConstraintViolation&gt; list = validator.validate(object); if (null != list &amp;&amp; !list.isEmpty()) &#123; log.info(\"校验参数异常:&#123;&#125;\", list.get(0).getMessage()); throw new RuntimeException(list.get(0).getMessage()); &#125; &#125; public static void validateObject(Object object, String[] profiles) &#123; validator.disableAllProfiles(); for (int i = 0; i &lt; profiles.length; i++) &#123; validator.enableProfile(profiles[i]); &#125; List&lt;ConstraintViolation&gt; list = validator.validate(object); if (null != list &amp;&amp; !list.isEmpty()) &#123; log.info(\"校验参数异常:&#123;&#125;\", list.get(0).getMessage()); throw new RuntimeException(list.get(0).getMessage()); &#125; &#125; public static void validateObject(Class clazz, String filedName, Object filedValue) &#123; try&#123; Field f = clazz.getDeclaredField(filedName); List&lt;ConstraintViolation&gt; list = validator.validateFieldValue(clazz.newInstance(), clazz.getDeclaredField(filedName), filedValue); if (null != list &amp;&amp; !list.isEmpty()) &#123; log.info(\"校验参数异常:&#123;&#125;\", list.get(0).getMessage()); throw new RuntimeException(list.get(0).getMessage()); &#125; &#125;catch (Exception e)&#123; log.error(\"校验参数，反射异常：&#123;&#125;\", e.getMessage()); &#125; &#125;&#125; 配置JavaBean中的注解123456789@NotNull @NotEmptyprivate String id;@Length(min=5,max=20,profiles=\"nc2\")private String userName;@NotNull @NotEmptyprivate String userCode;@Length(min=5,max=20,profiles=\"nc\")private String loginName; 调用示例1、完全验证 VerifyUtil.validateObject(user); 2、选择性验证（多个验证中选择性验证） VerifyUtil.validateObject(user, profiles); 注：根据profiles进行选择性验证entity对象，可以指定多个profiles，String[] profiles。 3、验证对象的某个字段 public List validateFieldValue(final Object validatedObject, final Field validatedField,final Object fieldValueToValidate) 三种方法在实际都能用到，oval设计的真是堪称完美！ 复杂一些的注解验证写法，可以参考参考博文：（https://www.cnblogs.com/koal/p/6871742.html） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192@Datapublic class NewHouseInputParam &#123; @NotNull(errorCode = \"-10001\", message = \"orderId不能为空\") private Long orderId;// 订单Id @NotNull(errorCode = \"-1\", message = \"INPUT订单状态不能为空\") private Integer status; //(1,\"录入报备\",\"\"),(2,\"录入到访\",\"\"),(3,\"录入无效\",\"\"),(4,\"录入下定\",\"\"),(5,\"录入成交\",\"\"),(6,\"录入开票\",\"\"),(7,\"录入结佣\",\"\"), //报备录入 @NotNull(profiles = &#123;\"profile_1\"&#125;,errorCode = \"-1\", message = \"报备日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_1\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"报备日期不合法\") private String applyDate;// 报备日期 //到访录入 @NotNull(profiles = &#123;\"profile_2\"&#125;,errorCode = \"-1\", message = \"到访日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_2\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"到访日期不合法\") private String visitDate;// 到访日期 @NotNull(profiles = &#123;\"profile_2\"&#125;,errorCode = \"-1\", message = \"到访确认单照片不能为空\") private String visitImgKey;// 到访确认单照片 //下定录入 @NotNull(profiles = &#123;\"profile_4\"&#125;,errorCode = \"-1\", message = \"下定合同照片不能为空\") private String bookImgKey;// 下定合同照片 @NotNull(profiles = &#123;\"profile_4\"&#125;,errorCode = \"-1\", message = \"产品id不能为空\") private Long bookProductId;// 产品id @NotNull(profiles = &#123;\"profile_4\"&#125;,errorCode = \"-1\", message = \"下定合同编号不能为空\") @MaxLength(value = 20,profiles = &#123;\"profile_4\"&#125;,errorCode = \"-1\", message = \"下定合同编号不合法\") private String bookContractCode;// 下定合同编号 @NotNull(profiles = \"profile_4\",errorCode = \"-1\", message = \"下定金额不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_4\"&#125;,methodName = \"isValid6Money\",parameterType = String.class, errorCode = \"-1\", message = \"下定金额不合法\") private String bookPrice;// 下定金额 @NotNull(profiles = \"profile_4\",errorCode = \"-1\", message = \"购房总价不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_4\"&#125;,methodName = \"isValid9Money\",parameterType = String.class, errorCode = \"-1\", message = \"购房总价不合法\") private String bookTotalPrice;// 购房总价 @NotNull(profiles = \"profile_4\",errorCode = \"-1\", message = \"预计佣金不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_4\"&#125;,methodName = \"isValid9Money\",parameterType = String.class, errorCode = \"-1\", message = \"预计佣金不合法\") private String bookPossibleCommission;// 预计佣金 @NotNull(profiles = \"profile_4\",errorCode = \"-1\", message = \"下定日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_4\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"下定日期不合法\") private String bookDate;// 下定日期 //成交录入 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"合同照片不能为空\") @MinLength(profiles = \"profile_5\",value = 1,errorCode = \"-1\",message = \"合同照片不能为空\") private String dealImgKey;// 合同照片 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"合同总价不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_5\"&#125;,methodName = \"isValid6Money\",parameterType = String.class, errorCode = \"-1\", message = \"合同总价不合法\") private String dealContractPrice;// 合同总价 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"产品Id不能为空\") private Long dealProductId;// 产品Id @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"合同编号不能为空\") @MinLength(profiles = \"profile_5\",value = 1,errorCode = \"-1\",message = \"合同编号不能为空\") private String dealContractCode;// 合同编号 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"应收佣金不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_5\"&#125;,methodName = \"isValid6Money\",parameterType = String.class, errorCode = \"-1\", message = \"应收佣金不合法\") private String dealReceivableCommission;// 应收佣金 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"成交日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_5\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"成交日期不合法\") private String dealDate;// 成交日期 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"室不能为空\") @Range(profiles = &#123;\"profile_5\"&#125;,min = 0,max = 9,errorCode = \"-1\", message = \"室不合法\") private Integer bedroomSum;// 室 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"厅不能为空\") @Range(profiles = &#123;\"profile_5\"&#125;,min = 0,max = 9,errorCode = \"-1\", message = \"厅不合法\") private Integer livingRoomSum;// 厅 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"卫不能为空\") @Range(profiles = &#123;\"profile_5\"&#125;,min = 0,max = 9,errorCode = \"-1\", message = \"卫不合法\") private Integer wcSum;// 卫 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"面积不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_5\"&#125;,methodName = \"isValid4Money\",parameterType = String.class, errorCode = \"-1\", message = \"面积不合法\") private String spaceArea;// 面积 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"室号不能为空\") @MaxLength(profiles = &#123;\"profile_5\"&#125;,value = 10,errorCode = \"-1\", message = \"室号非法\") private String room;// 室号 @NotNull(profiles = &#123;\"profile_5\"&#125;,errorCode = \"-1\", message = \"楼栋号不能为空\") @MaxLength(profiles = &#123;\"profile_5\"&#125;,value = 10,errorCode = \"-1\", message = \"楼栋号非法\") private String building;// 楼栋号 //开票录入 @NotNull(profiles = &#123;\"profile_6\"&#125;,errorCode = \"-1\", message = \"开票金额不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_6\"&#125;,methodName = \"isValid6Money\",parameterType = String.class, errorCode = \"-1\", message = \"开票金额不合法\") private String invoicePrice;// 开票金额 @NotNull(profiles = &#123;\"profile_6\"&#125;,errorCode = \"-1\", message = \"开票日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_6\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"开票日期不合法\") private String invoiceDate;// 开票日期 //结佣录入 @NotNull(profiles = &#123;\"profile_7\"&#125;,errorCode = \"-1\", message = \"结佣金额不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_7\"&#125;,methodName = \"isValid6Money\",parameterType = String.class, errorCode = \"-1\", message = \"结佣金额不合法\") private String commissionPrice;// 结佣金额 @NotNull(profiles = &#123;\"profile_7\"&#125;,errorCode = \"-1\", message = \"结佣日期不能为空\") @ValidateWithMethod(profiles = &#123;\"profile_7\"&#125;,methodName = \"isValidDate\",parameterType = String.class, errorCode = \"-1\", message = \"结佣日期不合法\") private String commissionDate;// 结佣日期 //失效录入 @NotNull(profiles = &#123;\"profile_3\"&#125;,errorCode = \"-1\", message = \"失效原因不能为空\") @MaxLength(profiles = &#123;\"profile_3\"&#125;,value = 100,errorCode = \"-1\", message = \"失效原因不合法\") private String invalidDesc;// 失效原因 /** * 验证日期格式是否合法 * @param date * @return */ public boolean isValidDate(String date)&#123; Date d = DateUtil.stringToDate(date, \"YYYY-MM-dd\"); return d != null; &#125; /** * 验证范围&#123;0.00-9999.99&#125; * @param money * @return */ private boolean isValid4Money(String money)&#123; money = numericalMax2Points(money); if(money != null)&#123; float f = Float.parseFloat(money); if(f &gt;= 0 &amp;&amp; f &lt; 10000)&#123; return true; &#125; &#125; return false; &#125; /** * 验证范围&#123;0.00-999999.99&#125; * @param money * @return */ private boolean isValid6Money(String money)&#123; money = numericalMax2Points(money); if(money != null)&#123; float f = Float.parseFloat(money); if(f &gt;= 0 &amp;&amp; f &lt; 1000000)&#123; return true; &#125; &#125; return false; &#125; /** * 验证范围&#123;0.00-999,999,999.99&#125; * @param money * @return */ private boolean isValid9Money(String money)&#123; money = numericalMax2Points(money); if(money != null)&#123; float f = Float.parseFloat(money); if(f &gt;= 0 &amp;&amp; f &lt; 1000000000)&#123; return true; &#125; &#125; return false; &#125; /** * 判断在去除\",\"后是否是数字，并且最多两位小数 * 正确则返回处理后的money * 否则返回null * @param money * @return */ private String numericalMax2Points(String money)&#123; try &#123; if (money != null) &#123; if (money.indexOf(\",\") &gt; 0 || money.indexOf(\"，\") &gt; 0) &#123; money = StringUtil.remove(money, ','); money = StringUtil.remove(money, '，'); &#125; if (money.matches(\"-?[0-9]+.?([0-9]&#123;0,2&#125;)\")) &#123; return money; &#125; &#125; &#125;catch (Exception e)&#123;&#125; return null; &#125;&#125;","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"使用python中的tinify模块压缩图片","slug":"使用python中的tinify模块压缩图片","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/使用python中的tinify模块压缩图片.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/使用python中的tinify模块压缩图片.html","excerpt":"tinify模块相关资料： tinypng官网 压缩PNG图片 tinyjpg官网 压缩JPG图片 tinify官网 开发参考文档 Quick Start安装 python 的 tinify 模块1$ pip install --upgrade tinify 重要: 申请API KEY","text":"tinify模块相关资料： tinypng官网 压缩PNG图片 tinyjpg官网 压缩JPG图片 tinify官网 开发参考文档 Quick Start安装 python 的 tinify 模块1$ pip install --upgrade tinify 重要: 申请API KEY 编写Python代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# coding:utf-8# /usr/bin/python# author by zhanglsimport osimport sysimport os.pathimport shutilimport tinifytemPath = os.getcwd()+'/'+'temDir' #临时目录,注意该脚本最后是要删掉这个临时目录的tinify.key = \"FVWYUsGfJyaFQvGtFXIlZrzWsk1voGQx\" #刚刚申请的API KEYversion = \"0.0.1\" #版本# 压缩的主函数\"\"\"1. scale：如果method参数设置为scale，则只需要提供width或者height其中的一个。服务器会根据原比例缩小图片。如果同时提供width和height将会报错2. fit：如果method参数设置为fit，则需要同时提供width和height以确定一个范围，缩小后的图片会保证尽量填充该区域。3. cover：如果method参数设置为cover，缩小后的图片会填满width和height提供的区域，在必要的情况下服务器会根据一套算法保留他们认为的主要内容，其他部分会被裁剪。\"\"\"def compress_core(inputFile, outputFile, img_width): source = tinify.from_file(inputFile) if img_width is not -1: resized = source.resize(method=\"scale\", width=img_width) resized.to_file(outputFile) else: copyrighted = source.preserve(\"copyright\", \"creation\", \"location\") copyrighted.to_file(outputFile) # source.to_file(outputFile)# 压缩一个文件夹下的图片def compress_path(path, width): print(\"compress_path-------------------------------------\") fromfilepath = path #源路径 print(\"fromFilePath=%s\" % fromfilepath) for root, dirs, files in os.walk(fromfilepath): print(\"root = %s\" % root) print(\"dirs = %s\" % dirs) print(\"files= %s\" % files) for name in files: filename, filesuffix = os.path.splitext(name) if filesuffix == '.png' or filesuffix == '.JPG' or filesuffix == '.jpg' or filesuffix == '.jpeg': fromfile = os.path.join(root, name) tofile = os.path.join(temPath, name) print(fromfile) print(tofile) print(filename) compress_core(fromfile, tofile, width) shutil.copy2(tofile, fromfile) # 将压缩后的文件覆盖原文件if __name__ == \"__main__\": if not os.path.exists(temPath): os.mkdir(temPath) if len(sys.argv) == 2: compress_path(sys.argv[1], -1) if len(sys.argv) == 3: compress_path(sys.argv[1], sys.argv[2]) shutil.rmtree(temPath) 保存文件名: comtest.py 如何调用1python comtest.py d:\\image 存放待压缩的图片源文件: d:\\image 压缩完毕后的文件，会自动替换源目录的源文件。如想保存源文件，请做好备份工作。 我使用的python是3.5版本 参考文档https://blog.csdn.net/jy692405180/article/details/52409369https://tinypng.com/developers/reference/python","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"我的 Python 笔记（一）","slug":"我的 Python 笔记（一）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（一）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（一）.html","excerpt":"我的 Python 笔记（一）初识Python Python 越来越火，各种领域都在发力，大数据，机器学习，人工智能等。 让我这个JAVA Coder开始关注这门语言，听说高中、大学毕业都要开始考试科目里加上这门语言，成为必修语言。 只是在Python介绍里面，知道python和JavaScript一样是解释型的语言，也是和JAVA一样，需要被预编译成字节码执行的，也需要像JVM一样的环境，做到可移植性。 安装Python 选择V2.7 ？还是V3.6 ？ 这两个版本完全不能兼容，所以我安装了windows版的python V3.6 突然发现学习的时候很多程序都基于V2.7，就去学V2.7 ，又卸载V3.6 搞环境的时候，发现有个软件Anaconda可以管理什么python的虚拟环境？ 下载安装来玩玩，Anaconda3可以方便的切换python运行时版本环境。 教程选择廖雪峰大神的Python3教程，每个语言都是从基础语法开始。发现很多好用的东东。激发自己的学习兴趣。https://www.liaoxuefeng.com/ Anaconda3 安装配置 介绍： Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows,包含了众多流行的科学计算、数据分析的 Python 包。 Anaconda 安装包可以到 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ 下载。 去官网下载安装包，windowns和Mac 安装步骤都一样，一路下一步即可。 注：安装后比较占用空间，我安装到C盘，居然有9个G，还好我C盘比较大，安装Anaconda之前不用安装python，自带的。 验证安装，cmd进去，分别输入python、ipython、conda等命令，会看到相应的结果，说明安装成功。 Anaconda3安装成功之后，我们需要修改其包管理镜像为国内源。执行以下命令 123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes 在 Windows 上，会随 Anaconda 一起安装一批应用程序： Anaconda Navigator，它是用于管理环境和包的 GUI Anaconda Prompt 终端，它可让你使用命令行界面来管理环境和包 Spyder，它是面向科学开发的 IDE 为了避免报错，我推荐在默认环境下更新所有的包。打开 Anaconda Prompt （或者 Mac 下的终端），键入：conda upgrade --all","text":"我的 Python 笔记（一）初识Python Python 越来越火，各种领域都在发力，大数据，机器学习，人工智能等。 让我这个JAVA Coder开始关注这门语言，听说高中、大学毕业都要开始考试科目里加上这门语言，成为必修语言。 只是在Python介绍里面，知道python和JavaScript一样是解释型的语言，也是和JAVA一样，需要被预编译成字节码执行的，也需要像JVM一样的环境，做到可移植性。 安装Python 选择V2.7 ？还是V3.6 ？ 这两个版本完全不能兼容，所以我安装了windows版的python V3.6 突然发现学习的时候很多程序都基于V2.7，就去学V2.7 ，又卸载V3.6 搞环境的时候，发现有个软件Anaconda可以管理什么python的虚拟环境？ 下载安装来玩玩，Anaconda3可以方便的切换python运行时版本环境。 教程选择廖雪峰大神的Python3教程，每个语言都是从基础语法开始。发现很多好用的东东。激发自己的学习兴趣。https://www.liaoxuefeng.com/ Anaconda3 安装配置 介绍： Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows,包含了众多流行的科学计算、数据分析的 Python 包。 Anaconda 安装包可以到 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ 下载。 去官网下载安装包，windowns和Mac 安装步骤都一样，一路下一步即可。 注：安装后比较占用空间，我安装到C盘，居然有9个G，还好我C盘比较大，安装Anaconda之前不用安装python，自带的。 验证安装，cmd进去，分别输入python、ipython、conda等命令，会看到相应的结果，说明安装成功。 Anaconda3安装成功之后，我们需要修改其包管理镜像为国内源。执行以下命令 123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes 在 Windows 上，会随 Anaconda 一起安装一批应用程序： Anaconda Navigator，它是用于管理环境和包的 GUI Anaconda Prompt 终端，它可让你使用命令行界面来管理环境和包 Spyder，它是面向科学开发的 IDE 为了避免报错，我推荐在默认环境下更新所有的包。打开 Anaconda Prompt （或者 Mac 下的终端），键入：conda upgrade --all Anaconda3 命令操作 安装包命令 $&gt; conda install pymysql 安装多个包命令 安装时anaconda会自动管理依赖无需干预 $&gt; conda install pymysql django 指定版本 $&gt; conda install numpy=1.10 如果使用pip是这样滴，注意区别 $&gt; pip install numpy==1.10 列出环境下已安装的包 $&gt; conda list 更新包 $&gt; conda update django 搜索包 $&gt; conda search djan conda 创建虚拟环境 -n / -name 创建环境名称 list packages 为新建的环境安装包 $&gt; conda create -n learn_env django conda 指定创建的环境的python版本 $&gt; conda create -n learn_env python=3.6 进入创建的虚拟环境 在cmd和Mac中$&gt; source activate learn_env 进入创建的虚拟环境 在Anaconda Prompt 终端$&gt; activate learn_env 可查看当前的激活的环境$&gt; conda env list 保存导出环境信息文件$&gt; conda env export &gt; environment.yaml 加载导入环境信息文件$&gt; conda env create -f environment.yaml 删除虚拟环境$&gt; conda env remove -n learn_env 另：为我从事的每个项目创建环境很有用。这对于与数据不相关的项目（例如使用 Flask 开发的 Web 应用）也很有用。例如，个人博客Pelican [http://docs.getpelican.com/en/stable/#] Python的静态网站生成器 共享环境 : 在 GitHub上共享代码时，最好同样创建环境文件并将其包括在代码库中。这能让其他人更轻松地安装你的代码的所有依赖项。 对于不使用 conda的用户，我通常还会使用 pip freeze [https://pip.pypa.io/en/stable/reference/pip_freeze/] 将一个 pip requirements.txt 文件导出并包括在其中。","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的 Python 笔记（三）","slug":"我的 Python 笔记（三）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（三）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（三）.html","excerpt":"我的 Python 笔记（三）Urllib库 是Python 内置的Http请求库包含以下4个模块 urllib.request 请求模块 urlib.error 异常处理模块 urllib.parse url解析模块 urllib.robotparser robots.txt解析模块 urlopen方法urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)1234import urllib.requestresponse = urllib.request.urlopen('http://www.baidu.com')print(response.read().decode('utf-8')) 123456import urllib.parseimport urllib.requestdata = bytes(urllib.parse.urlencode(&#123;'word': 'hello'&#125;), encoding='utf8')response = urllib.request.urlopen('http://httpbin.org/post', data=data)print(response.read()) b&apos;{\\n &quot;args&quot;: {}, \\n &quot;data&quot;: &quot;&quot;, \\n &quot;files&quot;: {}, \\n &quot;form&quot;: {\\n &quot;word&quot;: &quot;hello&quot;\\n }, \\n &quot;headers&quot;: {\\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \\n &quot;Connect-Time&quot;: &quot;1&quot;, \\n &quot;Connection&quot;: &quot;close&quot;, \\n &quot;Content-Length&quot;: &quot;10&quot;, \\n &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, \\n &quot;Host&quot;: &quot;httpbin.org&quot;, \\n &quot;Total-Route-Time&quot;: &quot;0&quot;, \\n &quot;User-Agent&quot;: &quot;Python-urllib/3.5&quot;, \\n &quot;Via&quot;: &quot;1.1 vegur&quot;, \\n &quot;X-Request-Id&quot;: &quot;89667a57-c909-475a-9870-f01181e8c85d&quot;\\n }, \\n &quot;json&quot;: null, \\n &quot;origin&quot;: &quot;219.238.82.169&quot;, \\n &quot;url&quot;: &quot;http://httpbin.org/post&quot;\\n}\\n&apos; 1234import urllib.requestresponse = urllib.request.urlopen('http://httpbin.org/get', timeout=1)print(response.read()) b&apos;{\\n &quot;args&quot;: {}, \\n &quot;headers&quot;: {\\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \\n &quot;Host&quot;: &quot;httpbin.org&quot;, \\n &quot;User-Agent&quot;: &quot;Python-urllib/3.6&quot;\\n }, \\n &quot;origin&quot;: &quot;211.138.20.169, 211.138.20.169&quot;, \\n &quot;url&quot;: &quot;https://httpbin.org/get&quot;\\n}\\n&apos;","text":"我的 Python 笔记（三）Urllib库 是Python 内置的Http请求库包含以下4个模块 urllib.request 请求模块 urlib.error 异常处理模块 urllib.parse url解析模块 urllib.robotparser robots.txt解析模块 urlopen方法urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)1234import urllib.requestresponse = urllib.request.urlopen('http://www.baidu.com')print(response.read().decode('utf-8')) 123456import urllib.parseimport urllib.requestdata = bytes(urllib.parse.urlencode(&#123;'word': 'hello'&#125;), encoding='utf8')response = urllib.request.urlopen('http://httpbin.org/post', data=data)print(response.read()) b&apos;{\\n &quot;args&quot;: {}, \\n &quot;data&quot;: &quot;&quot;, \\n &quot;files&quot;: {}, \\n &quot;form&quot;: {\\n &quot;word&quot;: &quot;hello&quot;\\n }, \\n &quot;headers&quot;: {\\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \\n &quot;Connect-Time&quot;: &quot;1&quot;, \\n &quot;Connection&quot;: &quot;close&quot;, \\n &quot;Content-Length&quot;: &quot;10&quot;, \\n &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, \\n &quot;Host&quot;: &quot;httpbin.org&quot;, \\n &quot;Total-Route-Time&quot;: &quot;0&quot;, \\n &quot;User-Agent&quot;: &quot;Python-urllib/3.5&quot;, \\n &quot;Via&quot;: &quot;1.1 vegur&quot;, \\n &quot;X-Request-Id&quot;: &quot;89667a57-c909-475a-9870-f01181e8c85d&quot;\\n }, \\n &quot;json&quot;: null, \\n &quot;origin&quot;: &quot;219.238.82.169&quot;, \\n &quot;url&quot;: &quot;http://httpbin.org/post&quot;\\n}\\n&apos; 1234import urllib.requestresponse = urllib.request.urlopen('http://httpbin.org/get', timeout=1)print(response.read()) b&apos;{\\n &quot;args&quot;: {}, \\n &quot;headers&quot;: {\\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \\n &quot;Host&quot;: &quot;httpbin.org&quot;, \\n &quot;User-Agent&quot;: &quot;Python-urllib/3.6&quot;\\n }, \\n &quot;origin&quot;: &quot;211.138.20.169, 211.138.20.169&quot;, \\n &quot;url&quot;: &quot;https://httpbin.org/get&quot;\\n}\\n&apos; 123456789import socketimport urllib.requestimport urllib.errortry: response = urllib.request.urlopen('http://httpbin.org/get', timeout=0.1)except urllib.error.URLError as e: if isinstance(e.reason, socket.timeout): print('TIME OUT') TIME OUT 响应响应类型1234import urllib.requestresponse = urllib.request.urlopen('https://www.python.org')print(type(response)) &lt;class &apos;http.client.HTTPResponse&apos;&gt; 状态码、响应头123456import urllib.requestresponse = urllib.request.urlopen('https://www.python.org')print(response.status)print(response.getheaders())print(response.getheader('Server')) 200 [(&apos;Server&apos;, &apos;nginx&apos;), (&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;), (&apos;X-Frame-Options&apos;, &apos;SAMEORIGIN&apos;), (&apos;x-xss-protection&apos;, &apos;1; mode=block&apos;), (&apos;X-Clacks-Overhead&apos;, &apos;GNU Terry Pratchett&apos;), (&apos;Content-Length&apos;, &apos;49283&apos;), (&apos;Accept-Ranges&apos;, &apos;bytes&apos;), (&apos;Date&apos;, &apos;Mon, 18 Feb 2019 06:31:31 GMT&apos;), (&apos;Via&apos;, &apos;1.1 varnish&apos;), (&apos;Age&apos;, &apos;834&apos;), (&apos;Connection&apos;, &apos;close&apos;), (&apos;X-Served-By&apos;, &apos;cache-lax8626-LAX&apos;), (&apos;X-Cache&apos;, &apos;HIT&apos;), (&apos;X-Cache-Hits&apos;, &apos;35&apos;), (&apos;X-Timer&apos;, &apos;S1550471492.850098,VS0,VE0&apos;), (&apos;Vary&apos;, &apos;Cookie&apos;), (&apos;Strict-Transport-Security&apos;, &apos;max-age=63072000; includeSubDomains&apos;)] nginx 1234import urllib.requestresponse = urllib.request.urlopen('https://www.python.org')print(response.read().decode('utf-8')) 1234567891011121314from urllib import request, parseurl = 'http://httpbin.org/post'headers = &#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)', 'Host': 'httpbin.org'&#125;dict = &#123; 'name': 'Germey'&#125;data = bytes(parse.urlencode(dict), encoding='utf8')req = request.Request(url=url, data=data, headers=headers, method='POST')response = request.urlopen(req)print(response.read().decode('utf-8')) { &quot;args&quot;: {}, &quot;data&quot;: &quot;&quot;, &quot;files&quot;: {}, &quot;form&quot;: { &quot;name&quot;: &quot;Germey&quot; }, &quot;headers&quot;: { &quot;Accept-Encoding&quot;: &quot;identity&quot;, &quot;Connect-Time&quot;: &quot;1&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Content-Length&quot;: &quot;11&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;Total-Route-Time&quot;: &quot;0&quot;, &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;, &quot;Via&quot;: &quot;1.1 vegur&quot;, &quot;X-Request-Id&quot;: &quot;f96e736e-0b8a-4ab4-9dcc-a970fcd2fbbf&quot; }, &quot;json&quot;: null, &quot;origin&quot;: &quot;219.238.82.169&quot;, &quot;url&quot;: &quot;http://httpbin.org/post&quot; } 1234567891011from urllib import request, parseurl = 'http://httpbin.org/post'dict = &#123; 'name': 'Germey'&#125;data = bytes(parse.urlencode(dict), encoding='utf8')req = request.Request(url=url, data=data, method='POST')req.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)')response = request.urlopen(req)print(response.read().decode('utf-8')) { &quot;args&quot;: {}, &quot;data&quot;: &quot;&quot;, &quot;files&quot;: {}, &quot;form&quot;: { &quot;name&quot;: &quot;Germey&quot; }, &quot;headers&quot;: { &quot;Accept-Encoding&quot;: &quot;identity&quot;, &quot;Connect-Time&quot;: &quot;0&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Content-Length&quot;: &quot;11&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;Total-Route-Time&quot;: &quot;0&quot;, &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;, &quot;Via&quot;: &quot;1.1 vegur&quot;, &quot;X-Request-Id&quot;: &quot;a624bcaa-3581-4b93-84b0-037940338e71&quot; }, &quot;json&quot;: null, &quot;origin&quot;: &quot;219.238.82.169&quot;, &quot;url&quot;: &quot;http://httpbin.org/post&quot; } Handler代理123456789import urllib.requestproxy_handler = urllib.request.ProxyHandler(&#123; 'http': 'http://127.0.0.1:9743', 'https': 'https://127.0.0.1:9743'&#125;)opener = urllib.request.build_opener(proxy_handler)response = opener.open('http://httpbin.org/get')print(response.read()) b&apos;{\\n &quot;args&quot;: {}, \\n &quot;headers&quot;: {\\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \\n &quot;Connect-Time&quot;: &quot;2&quot;, \\n &quot;Connection&quot;: &quot;close&quot;, \\n &quot;Host&quot;: &quot;httpbin.org&quot;, \\n &quot;Total-Route-Time&quot;: &quot;0&quot;, \\n &quot;User-Agent&quot;: &quot;Python-urllib/3.5&quot;, \\n &quot;Via&quot;: &quot;1.1 vegur&quot;, \\n &quot;X-Request-Id&quot;: &quot;b0e2272d-1663-4192-ac45-eb958279afd8&quot;\\n }, \\n &quot;origin&quot;: &quot;110.10.176.224&quot;, \\n &quot;url&quot;: &quot;http://httpbin.org/get&quot;\\n}\\n&apos; Cookie12345678import http.cookiejar, urllib.requestcookie = http.cookiejar.CookieJar()handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open('http://www.baidu.com')for item in cookie: print(item.name+\"=\"+item.value) BAIDUID=E77BF84491E332F6F8F1D451AD0063D3:FG=1 BIDUPSID=E77BF84491E332F6F8F1D451AD0063D3 H_PS_PSSID=1466_21127_22075 PSTM=1490198051 BDSVRTM=0 BD_HOME=0 1234567import http.cookiejar, urllib.requestfilename = \"cookie.txt\"cookie = http.cookiejar.MozillaCookieJar(filename)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open('http://www.baidu.com')cookie.save(ignore_discard=True, ignore_expires=True) 1234567import http.cookiejar, urllib.requestfilename = 'cookie.txt'cookie = http.cookiejar.LWPCookieJar(filename)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open('http://www.baidu.com')cookie.save(ignore_discard=True, ignore_expires=True) 1234567import http.cookiejar, urllib.requestcookie = http.cookiejar.LWPCookieJar()cookie.load('cookie.txt', ignore_discard=True, ignore_expires=True)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open('http://www.baidu.com')print(response.read().decode('utf-8')) 异常处理12345from urllib import request, errortry: response = request.urlopen('http://cuiqingcai.com/index.htm')except error.URLError as e: print(e.reason) Not Found 12345678910from urllib import request, errortry: response = request.urlopen('http://cuiqingcai.com/index.htm')except error.HTTPError as e: print(e.reason, e.code, e.headers, sep='\\n')except error.URLError as e: print(e.reason)else: print('Request Successfully') Not Found 404 Server: nginx/1.10.1 Date: Wed, 22 Mar 2017 15:59:55 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: &lt;http://cuiqingcai.com/wp-json/&gt;; rel=&quot;https://api.w.org/&quot; 12345678910import socketimport urllib.requestimport urllib.errortry: response = urllib.request.urlopen('https://www.baidu.com', timeout=0.01)except urllib.error.URLError as e: print(type(e.reason)) if isinstance(e.reason, socket.timeout): print('TIME OUT') &lt;class &apos;socket.timeout&apos;&gt; TIME OUT URL解析urlparse方法urllib.parse.urlparse(urlstring, scheme=’’, allow_fragments=True)1234from urllib.parse import urlparseresult = urlparse('http://www.baidu.com/index.html;user?id=5#comment')print(type(result), result) &lt;class &apos;urllib.parse.ParseResult&apos;&gt; ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;) 1234from urllib.parse import urlparseresult = urlparse('www.baidu.com/index.html;user?id=5#comment', scheme='https')print(result) ParseResult(scheme=&apos;https&apos;, netloc=&apos;&apos;, path=&apos;www.baidu.com/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;) 1234from urllib.parse import urlparseresult = urlparse('http://www.baidu.com/index.html;user?id=5#comment', scheme='https')print(result) ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;) 1234from urllib.parse import urlparseresult = urlparse('http://www.baidu.com/index.html;user?id=5#comment', allow_fragments=False)print(result) ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5#comment&apos;, fragment=&apos;&apos;) 1234from urllib.parse import urlparseresult = urlparse('http://www.baidu.com/index.html#comment', allow_fragments=False)print(result) ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html#comment&apos;, params=&apos;&apos;, query=&apos;&apos;, fragment=&apos;&apos;) urlunparse1234from urllib.parse import urlunparsedata = ['http', 'www.baidu.com', 'index.html', 'user', 'a=6', 'comment']print(urlunparse(data)) http://www.baidu.com/index.html;user?a=6#comment urljoin12345678910from urllib.parse import urljoinprint(urljoin('http://www.baidu.com', 'FAQ.html'))print(urljoin('http://www.baidu.com', 'https://cuiqingcai.com/FAQ.html'))print(urljoin('http://www.baidu.com/about.html', 'https://cuiqingcai.com/FAQ.html'))print(urljoin('http://www.baidu.com/about.html', 'https://cuiqingcai.com/FAQ.html?question=2'))print(urljoin('http://www.baidu.com?wd=abc', 'https://cuiqingcai.com/index.php'))print(urljoin('http://www.baidu.com', '?category=2#comment'))print(urljoin('www.baidu.com', '?category=2#comment'))print(urljoin('www.baidu.com#comment', '?category=2')) http://www.baidu.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html?question=2 https://cuiqingcai.com/index.php http://www.baidu.com?category=2#comment www.baidu.com?category=2#comment www.baidu.com?category=2 urlencode123456789from urllib.parse import urlencodeparams = &#123; 'name': 'germey', 'age': 22&#125;base_url = 'http://www.baidu.com?'url = base_url + urlencode(params)print(url) http://www.baidu.com?name=germey&amp;age=22","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的 Python 笔记（二）","slug":"我的 Python 笔记（二）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（二）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（二）.html","excerpt":"我的 Python 笔记（二）搭建 Django 开发环境 学习了Python的语法和基础知识，对于老程序员来说，可直接上手学习web全能型Python框架Django 基础环境 system : windows 10 python : anaconda3 并创建虚拟环境 conda create -n leanrn python=3.6 Django : V2.1 Django 2.1支持Python 3.5及以后版本。 查看Django版本信息 : python -m django –version 打开Anaconda Prompt 终端 创建虚拟环境 $&gt; conda create -n learn python=3.6注：我的windows10 里面 创建的虚拟环境对应的目录是在~.conda\\envs\\learn\\python.exe 查看当前环境 $&gt; conda env list 激活创建的新环境 learn $&gt; activate learn 查看当前环境下安装的包 $&gt; conda list 安装Django包 $&gt; conda install django=2.=1 或者 pip install django==2.1 安装pymysql包 $&gt; conda install pymysql 配置开发环境 pycharm 使用Django创建项目骨架, learn_site是项目名称 $&gt; django-admin startproject learn_site注: 也可以使用pycharm新建项目，选择New Project，在左面选择Django，右面Location路径填写你的项目目录，我的是D:\\py_code\\learn_site Project Interpreter &gt; Existing interpreter &gt; interpreter 里面选择你新建的环境的python.exe 在More Settings &gt; Application name: 给模块起个名字 blog django中的基本概念，一个项目中包含多个Application应用，这里建的blog是建立项目时一起新建一个应用。当然这里可以不新建应用，不是必须的 记得选中Enable Django admin,这个是Django自带的非常强大的web后台管理平台。","text":"我的 Python 笔记（二）搭建 Django 开发环境 学习了Python的语法和基础知识，对于老程序员来说，可直接上手学习web全能型Python框架Django 基础环境 system : windows 10 python : anaconda3 并创建虚拟环境 conda create -n leanrn python=3.6 Django : V2.1 Django 2.1支持Python 3.5及以后版本。 查看Django版本信息 : python -m django –version 打开Anaconda Prompt 终端 创建虚拟环境 $&gt; conda create -n learn python=3.6注：我的windows10 里面 创建的虚拟环境对应的目录是在~.conda\\envs\\learn\\python.exe 查看当前环境 $&gt; conda env list 激活创建的新环境 learn $&gt; activate learn 查看当前环境下安装的包 $&gt; conda list 安装Django包 $&gt; conda install django=2.=1 或者 pip install django==2.1 安装pymysql包 $&gt; conda install pymysql 配置开发环境 pycharm 使用Django创建项目骨架, learn_site是项目名称 $&gt; django-admin startproject learn_site注: 也可以使用pycharm新建项目，选择New Project，在左面选择Django，右面Location路径填写你的项目目录，我的是D:\\py_code\\learn_site Project Interpreter &gt; Existing interpreter &gt; interpreter 里面选择你新建的环境的python.exe 在More Settings &gt; Application name: 给模块起个名字 blog django中的基本概念，一个项目中包含多个Application应用，这里建的blog是建立项目时一起新建一个应用。当然这里可以不新建应用，不是必须的 记得选中Enable Django admin,这个是Django自带的非常强大的web后台管理平台。 启动项目，验证 进入项目的根目录 $&gt; python manage.py runserver注： 点击其中的链接，或使用浏览器访问http://127.0.0.1:8000/即可看到Django的欢迎页面 这是Django开发服务器展现的网页，官方不建议在生产环境中使用开发服务器，所以在生产环境中仍需要使用Apache、Nginx等Web服务器。生产环境必须在项目根目录的settings.py关闭DEBUG = False Django开发服务器会自动加载更新后的Python代码，无需重启。但增加文件后需要重启Django开发服务器。 指定IP和端口 python manage.py runserver 0:8000 创建应用 在项目根目录（manage.py） $&gt; python manage.py startapp blog 修改learn_site/settings.py 文件 1234567891011121314151617INSTALLED_APPS = [ ..... &apos;blog&apos;, # 添加应用 或者使用 &apos;blog.apps.BlogConfig&apos;,]DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;blog&apos;, # mysql中创建数据库 create database blog &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123456&apos;, &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;PORT&apos;: &apos;3306&apos; &#125;&#125;LANGUAGE_CODE = &apos;zh_Hans&apos; # 修改语言TIME_ZONE = &apos;Asia/Shanghai&apos; #修改时区 打开blog/views.py，输入以下代码： 12345from django.http import HttpResponse def index(request): return HttpResponse(&quot;Hello, world.&quot;) 修改learn_site/urls.py文件 12345app_name = &apos;blog&apos; # 命名空间urlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;blog/&apos;, include((&apos;blog.urls&apos;, &apos;blog&apos;), namespace=&apos;blog&apos;)),] 修改 learn_site/ init.py文件 12import pymysqlpymysql.install_as_MySQLdb() 修改blog\\urls.py文件 1234567from django.urls import path from . import views urlpatterns = [ path(&apos;&apos;, views.index, name=&apos;index&apos;),] 启动django $&gt; python manage.py runserver 访问 http://127.0.0.1:8000/blog 即可显示Hello world. Django 命令操作 创建管理员账号 $&gt; python manage.py createsuperuser –username=admin --email=admin@qq.com 模型生成sql脚本 appname 是应用名称 如果不写表示生成所有应用的sql $&gt; python manage.py makemigrations appname 模型orm到mysql $&gt; python manage.py migrate 清空数据库 $&gt; python manage.py flush 项目终端 $&gt; python manage.py shell 修改管理员密码 $&gt; python manage.py changepassword username","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的 Python 笔记（五）","slug":"我的 Python 笔记（五）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（五）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（五）.html","excerpt":"我的 Python 笔记（五）Python 中的 正则表达式 爬虫常见匹配模式 模式 描述 \\w 匹配字母数字及下划线 \\W 匹配非字母数字下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9] \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串 \\z 匹配字符串结束 \\G 匹配最后匹配完成的位置 \\n 匹配一个换行符 \\t 匹配一个制表符 ^ 匹配字符串的开头 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 […] 用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’ [^…] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。 * 匹配0个或多个的表达式。 + 匹配1个或多个的表达式。 ? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式 {n} 精确匹配n个前面表达式。 {n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a&#124;b 匹配a或b ( ) 匹配括号内的表达式，也表示一个组 re.matchre.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。re.match(pattern, string, flags=0) 最常规的匹配12345678import recontent = 'Hello 123 4567 World_This is a Regex Demo'print(len(content))result = re.match('^Hello\\s\\d\\d\\d\\s\\d&#123;4&#125;\\s\\w&#123;10&#125;.*Demo$', content)print(result)print(result.group())print(result.span()) 41 &lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41) 泛匹配1234567import recontent = 'Hello 123 4567 World_This is a Regex Demo'result = re.match('^Hello.*Demo$', content)print(result)print(result.group())print(result.span()) &lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41)","text":"我的 Python 笔记（五）Python 中的 正则表达式 爬虫常见匹配模式 模式 描述 \\w 匹配字母数字及下划线 \\W 匹配非字母数字下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9] \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串 \\z 匹配字符串结束 \\G 匹配最后匹配完成的位置 \\n 匹配一个换行符 \\t 匹配一个制表符 ^ 匹配字符串的开头 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 […] 用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’ [^…] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。 * 匹配0个或多个的表达式。 + 匹配1个或多个的表达式。 ? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式 {n} 精确匹配n个前面表达式。 {n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a&#124;b 匹配a或b ( ) 匹配括号内的表达式，也表示一个组 re.matchre.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。re.match(pattern, string, flags=0) 最常规的匹配12345678import recontent = 'Hello 123 4567 World_This is a Regex Demo'print(len(content))result = re.match('^Hello\\s\\d\\d\\d\\s\\d&#123;4&#125;\\s\\w&#123;10&#125;.*Demo$', content)print(result)print(result.group())print(result.span()) 41 &lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41) 泛匹配1234567import recontent = 'Hello 123 4567 World_This is a Regex Demo'result = re.match('^Hello.*Demo$', content)print(result)print(result.group())print(result.span()) &lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41) 匹配目标1234567import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^Hello\\s(\\d+)\\sWorld.*Demo$', content)print(result)print(result.group(1))print(result.span()) &lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt; 1234567 (0, 40) 贪婪匹配123456import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^He.*(\\d+).*Demo$', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt; 7 非贪婪匹配123456import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^He.*?(\\d+).*Demo$', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt; 1234567 匹配模式1234567import recontent = '''Hello 1234567 World_Thisis a Regex Demo'''result = re.match('^He.*?(\\d+).*?Demo$', content, re.S)print(result.group(1)) 1234567 转义12345import recontent = 'price is $5.00'result = re.match('price is $5.00', content)print(result) None 12345import recontent = 'price is $5.00'result = re.match('price is \\$5\\.00', content)print(result) &lt;_sre.SRE_Match object; span=(0, 14), match=&apos;price is $5.00&apos;&gt; 总结：尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S re.searchre.search 扫描整个字符串并返回第一个成功的匹配。 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'result = re.match('Hello.*?(\\d+).*?Demo', content)print(result) None 123456import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'result = re.search('Hello.*?(\\d+).*?Demo', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(13, 53), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt; 1234567 总结：为匹配方便，能用search就不用match 匹配演练12345678910111213141516171819202122232425import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;&lt;i class=\"fa fa-user\"&gt;&lt;/i&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?active.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;', html, re.S)if result: print(result.group(1), result.group(2)) 齐秦 往事随风 12345678910111213141516171819202122232425import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;', html, re.S)if result: print(result.group(1), result.group(2)) 任贤齐 沧海一声笑 12345678910111213141516171819202122232425import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;', html)if result: print(result.group(1), result.group(2)) beyond 光辉岁月 re.findall搜索字符串，以列表形式返回全部能匹配的子串。 12345678910111213141516171819202122232425262728import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''results = re.findall('&lt;li.*?href=\"(.*?)\".*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;', html, re.S)print(results)print(type(results))for result in results: print(result) print(result[0], result[1], result[2]) [(&apos;/2.mp3&apos;, &apos;任贤齐&apos;, &apos;沧海一声笑&apos;), (&apos;/3.mp3&apos;, &apos;齐秦&apos;, &apos;往事随风&apos;), (&apos;/4.mp3&apos;, &apos;beyond&apos;, &apos;光辉岁月&apos;), (&apos;/5.mp3&apos;, &apos;陈慧琳&apos;, &apos;记事本&apos;), (&apos;/6.mp3&apos;, &apos;邓丽君&apos;, &apos;但愿人长久&apos;)] &lt;class &apos;list&apos;&gt; (&apos;/2.mp3&apos;, &apos;任贤齐&apos;, &apos;沧海一声笑&apos;) /2.mp3 任贤齐 沧海一声笑 (&apos;/3.mp3&apos;, &apos;齐秦&apos;, &apos;往事随风&apos;) /3.mp3 齐秦 往事随风 (&apos;/4.mp3&apos;, &apos;beyond&apos;, &apos;光辉岁月&apos;) /4.mp3 beyond 光辉岁月 (&apos;/5.mp3&apos;, &apos;陈慧琳&apos;, &apos;记事本&apos;) /5.mp3 陈慧琳 记事本 (&apos;/6.mp3&apos;, &apos;邓丽君&apos;, &apos;但愿人长久&apos;) /6.mp3 邓丽君 但愿人长久 1234567891011121314151617181920212223242526import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''results = re.findall('&lt;li.*?&gt;\\s*?(&lt;a.*?&gt;)?(\\w+)(&lt;/a&gt;)?\\s*?&lt;/li&gt;', html, re.S)print(results)for result in results: print(result[1]) [(&apos;&apos;, &apos;一路上有你&apos;, &apos;&apos;), (&apos;&lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&apos;, &apos;沧海一声笑&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&apos;, &apos;往事随风&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;&apos;, &apos;光辉岁月&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;&apos;, &apos;记事本&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&apos;, &apos;但愿人长久&apos;, &apos;&lt;/a&gt;&apos;)] 一路上有你 沧海一声笑 往事随风 光辉岁月 记事本 但愿人长久 re.sub替换字符串中每一个匹配的子串后返回替换后的字符串。 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('\\d+', '', content)print(content) Extra stings Hello World_This is a Regex Demo Extra stings 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('\\d+', 'Replacement', content)print(content) Extra stings Hello Replacement World_This is a Regex Demo Extra stings 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('(\\d+)', r'\\1 8910', content)print(content) Extra stings Hello 1234567 8910 World_This is a Regex Demo Extra stings 12345678910111213141516171819202122import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;''' 12345678910111213141516171819202122232425262728import rehtml = '''&lt;div id=\"songs-list\"&gt; &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt; &lt;p class=\"introduction\"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=\"list\" class=\"list-group\"&gt; &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt; &lt;li data-view=\"7\"&gt; &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"4\" class=\"active\"&gt; &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view=\"5\"&gt; &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''html = re.sub('&lt;a.*?&gt;|&lt;/a&gt;', '', html)print(html)results = re.findall('&lt;li.*?&gt;(.*?)&lt;/li&gt;', html, re.S)print(results)for result in results: print(result.strip()) &lt;div id=&quot;songs-list&quot;&gt; &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt; &lt;p class=&quot;introduction&quot;&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt; &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt; &lt;li data-view=&quot;7&quot;&gt; 沧海一声笑 &lt;/li&gt; &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt; 往事随风 &lt;/li&gt; &lt;li data-view=&quot;6&quot;&gt;光辉岁月&lt;/li&gt; &lt;li data-view=&quot;5&quot;&gt;记事本&lt;/li&gt; &lt;li data-view=&quot;5&quot;&gt; 但愿人长久 &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; [&apos;一路上有你&apos;, &apos;\\n 沧海一声笑\\n &apos;, &apos;\\n 往事随风\\n &apos;, &apos;光辉岁月&apos;, &apos;记事本&apos;, &apos;\\n 但愿人长久\\n &apos;] 一路上有你 沧海一声笑 往事随风 光辉岁月 记事本 但愿人长久 re.compile将正则字符串编译成正则表达式对象 1将一个正则表达式串编译成正则对象，以便于复用该匹配模式 12345678import recontent = '''Hello 1234567 World_Thisis a Regex Demo'''pattern = re.compile('Hello.*Demo', re.S)result = re.match(pattern, content)#result = re.match('Hello.*Demo', content, re.S)print(result) &lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This\\nis a Regex Demo&apos;&gt; 实战练习12345678910import requestsimport recontent = requests.get('https://book.douban.com/').textpattern = re.compile('&lt;li.*?cover.*?href=\"(.*?)\".*?title=\"(.*?)\".*?more-meta.*?author\"&gt;(.*?)&lt;/span&gt;.*?year\"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;', re.S)results = re.findall(pattern, content)for result in results: url, name, author, date = result author = re.sub('\\s', '', author) date = re.sub('\\s', '', date) print(url, name, author, date) https://book.douban.com/subject/26925834/?icn=index-editionrecommend 别走出这一步 [英]S.J.沃森 2017-1 https://book.douban.com/subject/26953532/?icn=index-editionrecommend 白先勇细说红楼梦 白先勇 2017-2-1 https://book.douban.com/subject/26959159/?icn=index-editionrecommend 岁月凶猛 冯仑 2017-2 https://book.douban.com/subject/26949210/?icn=index-editionrecommend 如果没有今天，明天会不会有昨天？ [瑞士]伊夫·博萨尔特（YvesBossart） 2017-1 https://book.douban.com/subject/27001447/?icn=index-editionrecommend 人类这100年 阿夏 2017-2 https://book.douban.com/subject/26864566/?icn=index-latestbook-subject 眼泪的化学 [澳]彼得·凯里 2017-2 https://book.douban.com/subject/26991064/?icn=index-latestbook-subject 青年斯大林 [英]西蒙·蒙蒂菲奥里 2017-3 https://book.douban.com/subject/26938056/?icn=index-latestbook-subject 带艾伯特回家 [美]霍默·希卡姆 2017-3 https://book.douban.com/subject/26954757/?icn=index-latestbook-subject 乳房 [美]弗洛伦斯·威廉姆斯 2017-2 https://book.douban.com/subject/26956479/?icn=index-latestbook-subject 草原动物园 马伯庸 2017-3 https://book.douban.com/subject/26956018/?icn=index-latestbook-subject 贩卖音乐 [美]大卫·伊斯曼 2017-3-1 https://book.douban.com/subject/26703649/?icn=index-latestbook-subject 被占的宅子 [阿根廷]胡利奥·科塔萨尔 2017-3 https://book.douban.com/subject/26578402/?icn=index-latestbook-subject 信仰与观看 [法]罗兰·雷希特(RolandRecht) 2017-2-17 https://book.douban.com/subject/26939171/?icn=index-latestbook-subject 妹妹的坟墓 [美]罗伯特·杜格尼(RobertDugoni) 2017-3-1 https://book.douban.com/subject/26972465/?icn=index-latestbook-subject 全栈市场人 Lydia 2017-2-1 https://book.douban.com/subject/26986928/?icn=index-latestbook-subject 终极X战警2 [英]马克·米勒&amp;nbsp;/&amp;nbsp;[美]亚当·库伯特 2017-3-15 https://book.douban.com/subject/26948144/?icn=index-latestbook-subject 格调（修订第3版） [美]保罗·福塞尔（PaulFussell） 2017-2 https://book.douban.com/subject/26945792/?icn=index-latestbook-subject 原谅石 [美]洛里·斯皮尔曼 2017-2 https://book.douban.com/subject/26974207/?icn=index-latestbook-subject 庇护二世闻见录 [意]皮科洛米尼 2017-2 https://book.douban.com/subject/26983143/?icn=index-latestbook-subject 遇见野兔的那一年 [芬]阿托·帕西林纳 2017-3-1 https://book.douban.com/subject/26976429/?icn=index-latestbook-subject 鲍勃·迪伦：诗人之歌 [法]让-多米尼克·布里埃 2017-4 https://book.douban.com/subject/26962860/?icn=index-latestbook-subject 牙医谋杀案 [英]阿加莎·克里斯蒂 2017-3 https://book.douban.com/subject/26923022/?icn=index-latestbook-subject 石挥谈艺录：把生命交给舞台 石挥 2017-2 https://book.douban.com/subject/26897190/?icn=index-latestbook-subject 理想 [美]安·兰德 2017-2 https://book.douban.com/subject/26985981/?icn=index-latestbook-subject 青苔不会消失 袁凌 2017-4 https://book.douban.com/subject/26984949/?icn=index-latestbook-subject 地下铁道 [美]科尔森·怀特黑德（ColsonWhitehead） 2017-3 https://book.douban.com/subject/26944012/?icn=index-latestbook-subject 极简进步史 [英]罗纳德·赖特 2017-4-1 https://book.douban.com/subject/26969002/?icn=index-latestbook-subject 驻马店伤心故事集 郑在欢 2017-2 https://book.douban.com/subject/26854223/?icn=index-latestbook-subject 致薇拉 [美]弗拉基米尔·纳博科夫 2017-3 https://book.douban.com/subject/26841616/?icn=index-latestbook-subject 北方档案 [法]玛格丽特·尤瑟纳尔 2017-2 https://book.douban.com/subject/26980391/?icn=index-latestbook-subject 食帖15：便当灵感集 林江 2017-2 https://book.douban.com/subject/26958882/?icn=index-latestbook-subject 生火 [法]克里斯多夫·夏布特（ChristopheChabouté）编绘 2017-3 https://book.douban.com/subject/26989163/?icn=index-latestbook-subject 文明之光（第四册） 吴军 2017-3-1 https://book.douban.com/subject/26878906/?icn=index-latestbook-subject 公牛山 [美]布赖恩·帕诺威奇 2017-2 https://book.douban.com/subject/26989534/?icn=index-latestbook-subject 几乎消失的偷闲艺术 [加拿大]达尼·拉费里埃 2017-4 https://book.douban.com/subject/26939973/?icn=index-latestbook-subject 散步去 [日]谷口治郎 2017-3 https://book.douban.com/subject/26865333/?icn=index-latestbook-subject 中国1945 [美]理查德·伯恩斯坦(RichardBernstein) 2017-3-1 https://book.douban.com/subject/26989242/?icn=index-latestbook-subject 有匪2：离恨楼 Priest 2017-3 https://book.douban.com/subject/26985790/?icn=index-latestbook-subject 女人、火与危险事物 [美]乔治·莱考夫 2017-3 https://book.douban.com/subject/26972277/?icn=index-latestbook-subject 寻找时间的人 [爱尔兰]凯特·汤普森 2017-3 https://www.douban.com/note/610758170/ 白先勇细说红楼梦【全二册】 白先勇 2017-2-1 https://read.douban.com/ebook/31540864/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 奇爱博士 [英]彼得·乔治 2016-8-1 https://read.douban.com/ebook/31433872/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 在时光中盛开的女子 李筱懿 2017-3 https://read.douban.com/ebook/31178635/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 如何高效记忆（原书第2版） [美]肯尼思•希格比（KennethL.Higbee） 2017-3-5 https://read.douban.com/ebook/31358183/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 愿无岁月可回头 回忆专用小马甲 2016-9 https://read.douban.com/ebook/31341636/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 走神的艺术与科学 [新西兰]迈克尔·C.科尔巴里斯 2017-3-1 https://read.douban.com/ebook/27621094/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 神秘的量子生命 [英]吉姆•艾尔－哈利利/约翰乔•麦克法登 2016-8 https://read.douban.com/ebook/31221966/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 寻找时间的人 [爱尔兰]凯特·汤普森 2017-3 https://read.douban.com/ebook/31481323/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 山之四季 [日]高村光太郎 2017-1 https://read.douban.com/ebook/31154855/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 东北游记 [美]迈克尔·麦尔 2017-1","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的 Python 笔记（六）","slug":"我的 Python 笔记（六）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（六）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（六）.html","excerpt":"我的 Python 笔记（六）BeautifulSoup解析库 解析器 使用方法 优势 劣势 Python标准库 BeautifulSoup(markup, “html.parser”) Python的内置标准库、执行速度适中 、文档容错能力强 Python 2.7.3 or 3.2.2)前的版本中文容错能力差 lxml HTML 解析器 BeautifulSoup(markup, “lxml”) 速度快、文档容错能力强 需要安装C语言库 lxml XML 解析器 BeautifulSoup(markup, “xml”) 速度快、唯一支持XML的解析器 需要安装C语言库 html5lib BeautifulSoup(markup, “html5lib”) 最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档 速度慢、不依赖外部扩展 基本使用12345678910111213141516html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.prettify())print(soup.title.string) 123456789101112131415161718192021222324252627282930313233&lt;html&gt; &lt;head&gt; &lt;title&gt; The Dormouse&apos;s story &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt; &lt;b&gt; The Dormouse&apos;s story &lt;/b&gt; &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;!-- Elsie --&gt; &lt;/a&gt; , &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt; Lacie &lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt; Tillie &lt;/a&gt; ;and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; ... &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 标签选择器选择元素1234567891011121314151617html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.title)print(type(soup.title))print(soup.head)print(soup.p) &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;class &apos;bs4.element.Tag&apos;&gt; &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt; &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt; 获取名称1234567891011121314html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.title.name) title","text":"我的 Python 笔记（六）BeautifulSoup解析库 解析器 使用方法 优势 劣势 Python标准库 BeautifulSoup(markup, “html.parser”) Python的内置标准库、执行速度适中 、文档容错能力强 Python 2.7.3 or 3.2.2)前的版本中文容错能力差 lxml HTML 解析器 BeautifulSoup(markup, “lxml”) 速度快、文档容错能力强 需要安装C语言库 lxml XML 解析器 BeautifulSoup(markup, “xml”) 速度快、唯一支持XML的解析器 需要安装C语言库 html5lib BeautifulSoup(markup, “html5lib”) 最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档 速度慢、不依赖外部扩展 基本使用12345678910111213141516html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.prettify())print(soup.title.string) 123456789101112131415161718192021222324252627282930313233&lt;html&gt; &lt;head&gt; &lt;title&gt; The Dormouse&apos;s story &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt; &lt;b&gt; The Dormouse&apos;s story &lt;/b&gt; &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;!-- Elsie --&gt; &lt;/a&gt; , &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt; Lacie &lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt; Tillie &lt;/a&gt; ;and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; ... &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 标签选择器选择元素1234567891011121314151617html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.title)print(type(soup.title))print(soup.head)print(soup.p) &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;class &apos;bs4.element.Tag&apos;&gt; &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt; &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt; 获取名称1234567891011121314html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.title.name) title 获取属性123456789101112131415html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.p.attrs['name'])print(soup.p['name']) 获取内容1234567891011121314html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p clss=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.p.string) 嵌套选择12345678910111213141516171819202122232425262728293031323334353637383940html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.head.title.string)``` ### 子节点和子孙节点```pythonhtml = \"\"\"&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse's story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=\"story\"&gt; Once upon a time there were three little sisters; and their names were &lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and &lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.p.contents) 12345678910111213141516171819202122232425262728293031 [&apos;\\n Once upon a time there were three little sisters; and their names were\\n &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt;, &apos;\\n&apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;, &apos; \\n and\\n &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;, &apos;\\n and they lived at the bottom of a well.\\n &apos;]``` ----------```pythonhtml = &quot;&quot;&quot;&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&quot;&quot;&quot;from bs4 import BeautifulSoupsoup = BeautifulSoup(html, &apos;lxml&apos;)print(soup.p.children)for i, child in enumerate(soup.p.children): print(i, child) 12345678910111213141516171819202122232425262728293031323334353637383940414243 &lt;list_iterator object at 0x1064f7dd8&gt; 0 Once upon a time there were three little sisters; and their names were 1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; 2 3 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 4 and 5 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; 6 and they lived at the bottom of a well. ``` ```pythonhtml = &quot;&quot;&quot;&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&quot;&quot;&quot;from bs4 import BeautifulSoupsoup = BeautifulSoup(html, &apos;lxml&apos;)print(soup.p.descendants)for i, child in enumerate(soup.p.descendants): print(i, child) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 &lt;generator object descendants at 0x10650e678&gt; 0 Once upon a time there were three little sisters; and their names were 1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; 2 3 &lt;span&gt;Elsie&lt;/span&gt; 4 Elsie 5 6 7 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 8 Lacie 9 and 10 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; 11 Tillie 12 and they lived at the bottom of a well. ``` ### 父节点和祖先节点```pythonhtml = &quot;&quot;&quot;&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&quot;&quot;&quot;from bs4 import BeautifulSoupsoup = BeautifulSoup(html, &apos;lxml&apos;)print(soup.a.parent) &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; 123456789101112131415161718192021html = \"\"\"&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse's story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=\"story\"&gt; Once upon a time there were three little sisters; and their names were &lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and &lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(list(enumerate(soup.a.parents))) [(0, &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt;), (1, &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt; &lt;/body&gt;), (2, &lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;)] 兄弟节点12345678910111213141516171819202122html = \"\"\"&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse's story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=\"story\"&gt; Once upon a time there were three little sisters; and their names were &lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt; &lt;span&gt;Elsie&lt;/span&gt; &lt;/a&gt; &lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and &lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=\"story\"&gt;...&lt;/p&gt;\"\"\"from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(list(enumerate(soup.a.next_siblings)))print(list(enumerate(soup.a.previous_siblings))) [(0, &apos;\\n&apos;), (1, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;), (2, &apos; \\n and\\n &apos;), (3, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;), (4, &apos;\\n and they lived at the bottom of a well.\\n &apos;)] [(0, &apos;\\n Once upon a time there were three little sisters; and their names were\\n &apos;)] 标准选择器find_all( name , attrs , recursive , text , **kwargs )可根据标签名、属性、内容查找文档 name12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.find_all('ul'))print(type(soup.find_all('ul')[0])) [&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt; &lt;/ul&gt;, &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;/ul&gt;] &lt;class &apos;bs4.element.Tag&apos;&gt; 12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')for ul in soup.find_all('ul'): print(ul.find_all('li')) [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;] [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;] attrs12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\" name=\"elements\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.find_all(attrs=&#123;'id': 'list-1'&#125;))print(soup.find_all(attrs=&#123;'name': 'elements'&#125;)) [&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt; &lt;/ul&gt;] [&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt; &lt;/ul&gt;] 12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.find_all(id='list-1'))print(soup.find_all(class_='element')) [&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt; &lt;/ul&gt;] [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;] text123456789101112131415161718192021html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.find_all(text='Foo')) [&apos;Foo&apos;, &apos;Foo&apos;] find( name , attrs , recursive , text , **kwargs )find返回单个元素，find_all返回所有元素 1234567891011121314151617181920212223html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.find('ul'))print(type(soup.find('ul')))print(soup.find('page')) &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt; &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt; &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;class &apos;bs4.element.Tag&apos;&gt; None find_parents() find_parent()find_parents()返回所有祖先节点，find_parent()返回直接父节点。 find_next_siblings() find_next_sibling()find_next_siblings()返回后面所有兄弟节点，find_next_sibling()返回后面第一个兄弟节点。 find_previous_siblings() find_previous_sibling()find_previous_siblings()返回前面所有兄弟节点，find_previous_sibling()返回前面第一个兄弟节点。 find_all_next() find_next()find_all_next()返回节点后所有符合条件的节点, find_next()返回第一个符合条件的节点 find_all_previous() 和 find_previous()find_all_previous()返回节点后所有符合条件的节点, find_previous()返回第一个符合条件的节点 CSS选择器通过select()直接传入CSS选择器即可完成选择 123456789101112131415161718192021222324html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')print(soup.select('.panel .panel-heading'))print(soup.select('ul li'))print(soup.select('#list-2 .element'))print(type(soup.select('ul')[0])) [&lt;div class=&quot;panel-heading&quot;&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt;] [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;] [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;] &lt;class &apos;bs4.element.Tag&apos;&gt; 12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')for ul in soup.select('ul'): print(ul.select('li')) [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;] [&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;] 获取属性1234567891011121314151617181920212223html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')for ul in soup.select('ul'): print(ul['id']) print(ul.attrs['id']) list-1 list-1 list-2 list-2 获取内容12345678910111213141516171819202122html='''&lt;div class=\"panel\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h4&gt;Hello&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;ul class=\"list\" id=\"list-1\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;li class=\"element\"&gt;Jay&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"list list-small\" id=\"list-2\"&gt; &lt;li class=\"element\"&gt;Foo&lt;/li&gt; &lt;li class=\"element\"&gt;Bar&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;'''from bs4 import BeautifulSoupsoup = BeautifulSoup(html, 'lxml')for li in soup.select('li'): print(li.get_text()) Foo Bar Jay Foo Bar 总结 推荐使用lxml解析库，必要时使用html.parser 标签选择筛选功能弱但是速度快 建议使用find()、find_all() 查询匹配单个结果或者多个结果 如果对CSS选择器熟悉建议使用select() 记住常用的获取属性和文本值的方法","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的 Python 笔记（四）","slug":"我的 Python 笔记（四）","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的 Python 笔记（四）.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的 Python 笔记（四）.html","excerpt":"我的 Python 笔记（四）Requests库安装 pip install requests conda install requests 实例引入12345678import requestsresponse = requests.get('https://www.baidu.com/')print(type(response))print(response.status_code)print(type(response.text))print(response.text)print(response.cookies) 各种请求方式123456import requestsrequests.post('http://httpbin.org/post')requests.put('http://httpbin.org/put')requests.delete('http://httpbin.org/delete')requests.head('http://httpbin.org/get')requests.options('http://httpbin.org/get') 请求基本GET请求基本写法1234import requestsresponse = requests.get('http://httpbin.org/get')print(response.text) 带参数GET请求123import requestsresponse = requests.get(\"http://httpbin.org/get?name=germey&amp;age=22\")print(response.text) 12345678import requestsdata = &#123; 'name': 'germey', 'age': 22&#125;response = requests.get(\"http://httpbin.org/get\", params=data)print(response.text)","text":"我的 Python 笔记（四）Requests库安装 pip install requests conda install requests 实例引入12345678import requestsresponse = requests.get('https://www.baidu.com/')print(type(response))print(response.status_code)print(type(response.text))print(response.text)print(response.cookies) 各种请求方式123456import requestsrequests.post('http://httpbin.org/post')requests.put('http://httpbin.org/put')requests.delete('http://httpbin.org/delete')requests.head('http://httpbin.org/get')requests.options('http://httpbin.org/get') 请求基本GET请求基本写法1234import requestsresponse = requests.get('http://httpbin.org/get')print(response.text) 带参数GET请求123import requestsresponse = requests.get(\"http://httpbin.org/get?name=germey&amp;age=22\")print(response.text) 12345678import requestsdata = &#123; 'name': 'germey', 'age': 22&#125;response = requests.get(\"http://httpbin.org/get\", params=data)print(response.text) 解析json12345678import requestsimport jsonresponse = requests.get(\"http://httpbin.org/get\")print(type(response.text))print(response.json())print(json.loads(response.text))print(type(response.json())) 获取二进制数据123456import requestsresponse = requests.get(\"https://github.com/favicon.ico\")print(type(response.text), type(response.content))print(response.text)print(response.content) 123456import requestsresponse = requests.get(\"https://github.com/favicon.ico\")with open('favicon.ico', 'wb') as f: f.write(response.content) f.close() 添加headers1234import requestsresponse = requests.get(\"https://www.zhihu.com/explore\")print(response.text) 1234567import requestsheaders = &#123; 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'&#125;response = requests.get(\"https://www.zhihu.com/explore\", headers=headers)print(response.text) 基本POST请求12345import requestsdata = &#123;'name': 'germey', 'age': '22'&#125;response = requests.post(\"http://httpbin.org/post\", data=data)print(response.text) 12345678import requestsdata = &#123;'name': 'germey', 'age': '22'&#125;headers = &#123; 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'&#125;response = requests.post(\"http://httpbin.org/post\", data=data, headers=headers)print(response.json()) 响应reponse属性12345678import requestsresponse = requests.get('http://www.jianshu.com')print(type(response.status_code), response.status_code)print(type(response.headers), response.headers)print(type(response.cookies), response.cookies)print(type(response.url), response.url)print(type(response.history), response.history) 状态码判断1234import requestsresponse = requests.get('http://www.jianshu.com/hello.html')exit() if not response.status_code == requests.codes.not_found else print('404 Not Found') 1234import requestsresponse = requests.get('http://www.jianshu.com')exit() if not response.status_code == 200 else print('Request Successfully') 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475100: ('continue',),101: ('switching_protocols',),102: ('processing',),103: ('checkpoint',),122: ('uri_too_long', 'request_uri_too_long'),200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\\\o/', '✓'),201: ('created',),202: ('accepted',),203: ('non_authoritative_info', 'non_authoritative_information'),204: ('no_content',),205: ('reset_content', 'reset'),206: ('partial_content', 'partial'),207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),208: ('already_reported',),226: ('im_used',),# Redirection.300: ('multiple_choices',),301: ('moved_permanently', 'moved', '\\\\o-'),302: ('found',),303: ('see_other', 'other'),304: ('not_modified',),305: ('use_proxy',),306: ('switch_proxy',),307: ('temporary_redirect', 'temporary_moved', 'temporary'),308: ('permanent_redirect', 'resume_incomplete', 'resume',), # These 2 to be removed in 3.0# Client Error.400: ('bad_request', 'bad'),401: ('unauthorized',),402: ('payment_required', 'payment'),403: ('forbidden',),404: ('not_found', '-o-'),405: ('method_not_allowed', 'not_allowed'),406: ('not_acceptable',),407: ('proxy_authentication_required', 'proxy_auth', 'proxy_authentication'),408: ('request_timeout', 'timeout'),409: ('conflict',),410: ('gone',),411: ('length_required',),412: ('precondition_failed', 'precondition'),413: ('request_entity_too_large',),414: ('request_uri_too_large',),415: ('unsupported_media_type', 'unsupported_media', 'media_type'),416: ('requested_range_not_satisfiable', 'requested_range', 'range_not_satisfiable'),417: ('expectation_failed',),418: ('im_a_teapot', 'teapot', 'i_am_a_teapot'),421: ('misdirected_request',),422: ('unprocessable_entity', 'unprocessable'),423: ('locked',),424: ('failed_dependency', 'dependency'),425: ('unordered_collection', 'unordered'),426: ('upgrade_required', 'upgrade'),428: ('precondition_required', 'precondition'),429: ('too_many_requests', 'too_many'),431: ('header_fields_too_large', 'fields_too_large'),444: ('no_response', 'none'),449: ('retry_with', 'retry'),450: ('blocked_by_windows_parental_controls', 'parental_controls'),451: ('unavailable_for_legal_reasons', 'legal_reasons'),499: ('client_closed_request',),# Server Error.500: ('internal_server_error', 'server_error', '/o\\\\', '✗'),501: ('not_implemented',),502: ('bad_gateway',),503: ('service_unavailable', 'unavailable'),504: ('gateway_timeout',),505: ('http_version_not_supported', 'http_version'),506: ('variant_also_negotiates',),507: ('insufficient_storage',),509: ('bandwidth_limit_exceeded', 'bandwidth'),510: ('not_extended',),511: ('network_authentication_required', 'network_auth', 'network_authentication'), 高级操作文件上传12345import requestsfiles = &#123;'file': open('favicon.ico', 'rb')&#125;response = requests.post(\"http://httpbin.org/post\", files=files)print(response.text) 获取cookie123456import requestsresponse = requests.get(\"https://www.baidu.com\")print(response.cookies)for key, value in response.cookies.items(): print(key + '=' + value) 会话维持模拟登录 12345import requestsrequests.get('http://httpbin.org/cookies/set/number/123456789')response = requests.get('http://httpbin.org/cookies')print(response.text) 123456import requestss = requests.Session()s.get('http://httpbin.org/cookies/set/number/123456789')response = s.get('http://httpbin.org/cookies')print(response.text) 证书验证1234import requestsresponse = requests.get('https://www.12306.cn')print(response.status_code) 12345import requestsfrom requests.packages import urllib3urllib3.disable_warnings()response = requests.get('https://www.12306.cn', verify=False)print(response.status_code) 1234import requestsresponse = requests.get('https://www.12306.cn', cert=('/path/server.crt', '/path/key'))print(response.status_code) 代理设置123456789import requestsproxies = &#123; \"http\": \"http://127.0.0.1:9743\", \"https\": \"https://127.0.0.1:9743\",&#125;response = requests.get(\"https://www.taobao.com\", proxies=proxies)print(response.status_code) 1234567import requestsproxies = &#123; \"http\": \"http://user:password@127.0.0.1:9743/\",&#125;response = requests.get(\"https://www.taobao.com\", proxies=proxies)print(response.status_code) 1pip3 install 'requests[socks]' 12345678import requestsproxies = &#123; 'http': 'socks5://127.0.0.1:9742', 'https': 'socks5://127.0.0.1:9742'&#125;response = requests.get(\"https://www.taobao.com\", proxies=proxies)print(response.status_code) 超时设置1234567import requestsfrom requests.exceptions import ReadTimeouttry: response = requests.get(\"http://httpbin.org/get\", timeout = 0.5) print(response.status_code)except ReadTimeout: print('Timeout') 认证设置12345import requestsfrom requests.auth import HTTPBasicAuthr = requests.get('http://120.27.34.24:9001', auth=HTTPBasicAuth('user', '123'))print(r.status_code) 1234import requestsr = requests.get('http://120.27.34.24:9001', auth=('user', '123'))print(r.status_code) 异常处理1234567891011import requestsfrom requests.exceptions import ReadTimeout, ConnectionError, RequestExceptiontry: response = requests.get(\"http://httpbin.org/get\", timeout = 0.5) print(response.status_code)except ReadTimeout: print('Timeout')except ConnectionError: print('Connection error')except RequestException: print('Error') Connection error","categories":[{"name":"python","slug":"python","permalink":"http://zhanglingsi.github.io/categories/python/"}],"tags":[]},{"title":"我的AutoHotkey配置文件","slug":"我的AutoHotkey配置文件","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/我的AutoHotkey配置文件.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/我的AutoHotkey配置文件.html","excerpt":"AutoHotkey安装与配置Quick StartAutoHotkey安装[官方文档] (https://www.autohotkey.com/docs/Tutorial.htm)[官方下载地址] (https://www.autohotkey.com/) 操作说明 可以使用/alt 打印alt键相关快捷键 可以使用/win 打印windows快捷键 可以使用/other 打印其他快捷键 注意在脚本中回车用“`n”表示，加号用“{+}”表示 将上述脚本保存为my.ahk文件保存到你的工作目录，然后双击运行。 将my.ahk文件创建快捷方式，放到windows启动文件夹中，即可实现开机后自动运行AutoHotkey 马上丢掉你是鼠标，快来体验飞一般的感觉吧！你懂的！","text":"AutoHotkey安装与配置Quick StartAutoHotkey安装[官方文档] (https://www.autohotkey.com/docs/Tutorial.htm)[官方下载地址] (https://www.autohotkey.com/) 操作说明 可以使用/alt 打印alt键相关快捷键 可以使用/win 打印windows快捷键 可以使用/other 打印其他快捷键 注意在脚本中回车用“`n”表示，加号用“{+}”表示 将上述脚本保存为my.ahk文件保存到你的工作目录，然后双击运行。 将my.ahk文件创建快捷方式，放到windows启动文件夹中，即可实现开机后自动运行AutoHotkey 马上丢掉你是鼠标，快来体验飞一般的感觉吧！你懂的！ 我的配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232;Notes: #==win !==Alt, \u001e^==Ctr, +==shift;===========================================#t::Run https://www.travis-ci.org/#b::Run https://www.baidu.com/#h::Run https://zhanglingsi.github.io/#c::Run http://zhanglingsi.coding.me/zhanglingsi/#j::Run https://github.com/zhanglingsi/; 工作相关#v::Run http://183.230.93.167:18082/dacp/login#n::Run http://112.25.233.117:58080/OnlineServer/FrameAction_myResources.action#i::Run https://tinypng.com/#o::Run http://oa.asiainfo.com/#s::winset,AlwaysOnTop,, A#q::Send !&#123;F4&#125;;======================启动应用程序=====================!n::run notepad!b::run, D:\\Program Files (x86)\\cmd_markdown_win64\\Cmd Markdown.exe!r::run, D:\\Program Files\\cmder\\Cmder.exe!w::run, C:\\Program Files (x86)\\Tencent\\WeChat\\WeChat.exe!s::run, D:\\Program Files\\UltraEdit-32\\Uedit32.exe!t::run, D:\\Program Files\\SecureCRT_x64\\SecureCRTPortable.exe!i::run, D:\\Program Files\\JetBrains\\IntelliJ IDEA 2017.1.4\\bin\\idea64.exe!m::run, C:\\Program Files\\SQLyog\\SQLyog.exe!o::run, C:\\Program Files (x86)\\PLSQL Developer\\plsqldev.exe!f::run, D:\\Program Files\\Foxmail 7.2\\Foxmail.exe!e::run, C:\\Program Files\\internet explorer\\iexplore.exe!d::run, D:\\Program Files\\Microsoft VS Code\\Code.exe!q::run, C:\\Program Files (x86)\\Tencent\\TIM\\Bin\\TIM.exe!x::WinMinimize A!z::WinMaximize A!c::WinRestore A!1::send #&#123;Tab&#125; !3::send #^&#123;right&#125; !2::send #^&#123;left&#125; ;===================拷贝文件路径============================^+c::; null= send ^csleep,200clipboard=%clipboard% ;%null%tooltip,%clipboard%sleep,500tooltip,return;================================================;replace CapsLock to LeftEnter; CapsLock = Alt CapsLock$CapsLock::EnterLAlt &amp; Capslock::SetCapsLockState, % GetKeyState(\"CapsLock\", \"T\") ? \"Off\" : \"On\"!u::Send ^c !&#123;tab&#125; ^v;================================================::/cmail::zhanglingsi@asiainfo.com::/mail::zhanglingsi@aliyun.com::/sf::select * from t ;::/sfw::select * from t where 1=1 and ;::/scf::select count(*) from t ;::/scfg::select count(*) from t where 1=1 group by t.;::/js::javascript:;::/win:: Win &#123;+&#125; e：打开资源管理器;`nWin` &#123;+&#125; d：显示桌面;`nWin` &#123;+&#125; f：打开查找对话框;`nWin &#123;+&#125; r：打开运行对话框;`nWin &#123;+&#125; l：锁定电脑;`nWin &#123;+&#125; u: 打开控制面板－轻松使用设置中心;`n`nwin &#123;+&#125; t：打开网页travis-ci;`nwin &#123;+&#125; b：打开网页baidu;`nwin &#123;+&#125; h：打开网页blog for github;`nwin &#123;+&#125; c：打开网页blog for coding;`nwin &#123;+&#125; j：打开网页my github;`nwin &#123;+&#125; v：打开网页DACP;`nwin &#123;+&#125; i：打开网页tinypng;`nwin &#123;+&#125; o：打开网页OA;`nwin &#123;+&#125; s：置顶当前窗口;`nwin &#123;+&#125; q：关闭应用程序;`nwin &#123;+&#125; z：激活chrome窗口;`n::/alt:: ALT &#123;+&#125; n： 打开notepad;`nALT &#123;+&#125; b： 打开打开Markdown;`nALT &#123;+&#125; r： 打开Cmder;`nALT &#123;+&#125; w： 打开微信;`nALT &#123;+&#125; s： 打开Uedit32;`nALT &#123;+&#125; t： 打开CRT;`nALT &#123;+&#125; i： 打开idea;`nALT &#123;+&#125; m： 打开SQLyog;`nALT &#123;+&#125; o： 打开plsqldev;`nALT &#123;+&#125; f： 打开Foxmail;`nALT &#123;+&#125; e： 打开iexplore;`nALT &#123;+&#125; d： 打开VSCode;`nALT &#123;+&#125; q： 打开TIM;`nALT &#123;+&#125; x： 最小化当前窗口;`nALT &#123;+&#125; z： 最大化当前窗口;`nALT &#123;+&#125; c： 还原当前窗口;`nALT &#123;+&#125; 1： 打开虚拟桌面;`nALT &#123;+&#125; 3： 向右切换虚拟桌面;`nALT &#123;+&#125; 2： 向左切换虚拟桌面;`n::/other:: Ctrl &#123;+&#125; shift &#123;+&#125; C：拷贝文件路径;`nCtrl &#123;+&#125; Win &#123;+&#125; C：拷贝取色;`n;=====================拷贝鼠标取色==============================^#c::MouseGetPos, mouseX, mouseYPixelGetColor, color, %mouseX%, %mouseY%, RGBStringRight color,color,6clipboard = %color%return;====================切换chrome===============================#z::IfWinNotExist ahk_class Chrome_WidgetWin_1&#123; Run \"C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\" WinActivate&#125;Else IfWinNotActive ahk_class Chrome_WidgetWin_1&#123; WinActivate&#125;Else&#123; WinMinimize&#125;Return;===================================================;左侧shift+鼠标滚轮调整窗口透明度（设置30-255的透明度，低于30基本上就看不见了，如需要可自行修改);;使用说明：; ◆左侧shift+滚轮下滑：减少透明度，一次10; ◆左侧shift+滚轮上滑：增加透明度，一次20; ◆左侧shift+中键按下：恢复透明度至255(完全不透明).;~LShift &amp; WheelUp::; 透明度调整，增加。WinGet, Transparent, Transparent,AIf (Transparent=\"\") Transparent=255 ;Transparent_New:=Transparent+10 Transparent_New:=Transparent+20 ;◆透明度增加速度。 If (Transparent_New &gt; 254) Transparent_New =255 WinSet,Transparent,%Transparent_New%,A tooltip now: ▲%Transparent_New%`nmae: __%Transparent% ;查看当前透明度（操作之后的）。 ;sleep 1500 SetTimer, RemoveToolTip_transparent_Lwin__2016.09.20, 1500 ;设置统一的这个格式，label在最后。return ~LShift &amp; WheelDown::;透明度调整，减少。WinGet, Transparent, Transparent,AIf (Transparent=\"\") Transparent=255 Transparent_New:=Transparent-10 ;◆透明度减少速度。 ;msgbox,Transparent_New=%Transparent_New% If (Transparent_New &lt; 30) ;◆最小透明度限制。 Transparent_New = 30 WinSet,Transparent,%Transparent_New%,A tooltip now: ▲%Transparent_New%`nmae: __%Transparent% ;查看当前透明度（操作之后的）。 ;sleep 1500 SetTimer, RemoveToolTip_transparent_Lwin__2016.09.20, 1500 ;设置统一的这个格式，label在最后。return ;设置Lwin &amp;Mbutton直接恢复透明度到255。~Lshift &amp; Mbutton:: WinGet, Transparent, Transparent,AWinSet,Transparent,255,A tooltip ▲Restored ;查看当前透明度（操作之后的）。;sleep 1500SetTimer, RemoveToolTip_transparent_Lwin__2016.09.20, 1500 ;设置统一的这个格式，label在最后。return removetooltip_transparent_Lwin__2016.09.20: ;LABELtooltipSetTimer, RemoveToolTip_transparent_Lwin__2016.09.20, Offreturn;===================================================; 按住空格不放，搭配edsf实现上下左右方向键，搭配cv实现backspace和del功能，搭配wr，实现home和end功能：#NoEnv ; #WarnSendMode InputSetWorkingDir %A_ScriptDir% AnyKeyPressedOtherThanSpace(mode = \"P\") &#123; keys = 1234567890-=qwertyuiop[]\\asdfghjkl;'zxcvbnm,./ Loop, Parse, keys &#123; isDown := GetKeyState(A_LoopField, mode) if(isDown) return True &#125; return False&#125;Space Up:: space_up := true Send, &#123;F18&#125; returnSpace:: if AnyKeyPressedOtherThanSpace()&#123; SendInput, &#123;Blind&#125;&#123;Space&#125; Return &#125; space_up := False inputed := False input, UserInput, L1 T0.1, &#123;F18&#125; if (space_up) &#123; Send, &#123;Blind&#125;&#123;Space&#125; return &#125;else if (StrLen(UserInput) == 1)&#123; Send, &#123;Space&#125;%UserInput% return &#125; while true&#123; input, UserInput, L1, &#123;F18&#125; if (space_up) &#123; if (!inputed)&#123; Send, &#123;Blind&#125;&#123;Space&#125; &#125; break &#125;else if (StrLen(UserInput) == 1) &#123; inputed := True StringLower, UserInput, UserInput if (UserInput == \"e\") Send, &#123;Blind&#125;&#123;Up&#125; else if (UserInput == \"d\") Send, &#123;Blind&#125;&#123;Down&#125; else if (UserInput == \"s\") Send, &#123;Blind&#125;&#123;Left&#125; else if (UserInput == \"f\") Send, &#123;Blind&#125;&#123;Right&#125; else if (UserInput == \"w\") Send, &#123;Blind&#125;&#123;Home&#125; else if (UserInput == \"r\") Send, &#123;Blind&#125;&#123;End&#125; else if (UserInput == \"c\") Send, &#123;Blind&#125;&#123;BS&#125; else if (UserInput == \"v\") Send, &#123;Blind&#125;&#123;DEL&#125; else Send, &#123;Blind&#125;%UserInput% &#125; &#125; return;===================================================~lbutton &amp; enter:: exitapp ~WheelUp:: if (existclass(\"ahk_class Shell_TrayWnd\")=1) Send,&#123;Volume_Up&#125; Return ~WheelDown:: if (existclass(\"ahk_class Shell_TrayWnd\")=1) Send,&#123;Volume_Down&#125; Return ~MButton:: if (existclass(\"ahk_class Shell_TrayWnd\")=1) Send,&#123;Volume_Mute&#125; Return Existclass(class) &#123; MouseGetPos,,,win WinGet,winid,id,%class% if win = %winid% Return,1 Else Return,0 &#125;;===================================================","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"打印日志规范","slug":"打印日志规范","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/打印日志规范.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/打印日志规范.html","excerpt":"打印日志规范FrameworkSlf4j + Logback Pattern格式：relative|time|ip|level|thread|packagename.classname|linenumber|msg relative：从程序启动到写入日志所耗费的时间。 time：当前时间，如：2014-07-23 16:27:04.547。 ip：本机ip。 level：日志级别。 thread：当前线程名称。 packagename.classname：java包名.类名。 linenumber：行数。 msg：日志详细信息。","text":"打印日志规范FrameworkSlf4j + Logback Pattern格式：relative|time|ip|level|thread|packagename.classname|linenumber|msg relative：从程序启动到写入日志所耗费的时间。 time：当前时间，如：2014-07-23 16:27:04.547。 ip：本机ip。 level：日志级别。 thread：当前线程名称。 packagename.classname：java包名.类名。 linenumber：行数。 msg：日志详细信息。 Msg为了更好的管理和分析日志，所以对字段命名名进行统一，格式为json，字段名类型分为3 类。 A类：必填，字段名和顺序必须一致。 B类：选填，字段名必须一致，顺序随意。 C类：选填，字段名和顺序都没有要求。 A类A类中只有一个字段：TrackingID。该id主要是为了分析一个请求在各个平台运行的整体情况，通过这个id关联起来。TrackingID由以下扩展的巴科斯范式（ABNF模板）定义12345trackingid = sendertype uuid *nvpair *sequencesendertype = 1*ALPHAuuid = \"_\" 8HEXDIG \"-\" 4HEXDIG \"-\" 4HEXDIG \"-\" 4HEXDIG \"-\" 12HEXDIGnvpair = \"_\" name \":\" value sequence = \"_\" 1*DIGITname = 1*ALPHA value = 1*ALPHA ExampleCIF_550e8400-e29b-41d4-a716-446655440000GETWAY_550e8400-e29b-41d4-a716-446655440000_0FONT_550e8400-e29b-41d4-a716-446655440000_1_1_3MAX_550e8400-e29b-41d4-a716-446655440000_CSS1:1234SER_550e8400-e29b-41d4-a716-446655440000_CSS1:1234_0_1PRE_550e8400-e29b-41d4-a716-446655440000_CSS1:1234_AUDT:5678CIF_550e8400-e29b-41d4-a716-446655440000_CSS1:1234_AUDT:5678_1_2 Illustration TrackingID中的sendertype必须唯一标识请求直接发起方，可以使⽤用系统名称。 TrackingID中的uuid必须是标准的UUID 16进制8-4-4-4-12字符串。 如果有nvpair, 必须填充1…n个nvpair, nvpair的语义由service自由决定. (因使用”“作为TrackingID各个component的分隔符, nvpair中不允许key或value中出现”“)。 下游service必须识别上游service的请求中带的TrackingID. 在下游service代表上游service继续请求其他service时,必须构造新的TrackingID, 其中uuid,nvpair和sequence 从上游service请求所带的TrackingID抽取,sendertype替换为下游service的标识,下游service可以添加新的nvair和sequence, 若添加了sequence,其值须反映由下游service 为响应上游service请求而发出的调用的次数.(如果service A调用service B, 我们称 service A为上游service, service B为下游service)。 知识点补充：ABNF 基本扩充要点（部分）：ABNF的基本语法： name = elements crlf用字符映射的ASCII码表示一个字符，格式为 %TYPE ，其中TYPE为进制（b/d/x三种）， b for binary（二进制），d for decimal（十进制），x for hexadecimal（十六进制）。如 %d13 和 %x0D 都代表 CR。用句号（.）相连，表示一串连续的字符，如 %d13.10 代表CRLF（即%d13和%d10相连接），再如 %x44.6f.6d.61.69.6e.3a 1*FWS 代表”Domain: “这一个字符串（注意最后还有一个空格）。 ABNF的核心规则： ALPHA = %x41-5A / %x61-7A ; A-Z / a-z，即 大写和小写 ASCII 字母(A-Z, a-z) BIT = “0” / “1” ; 即二进制字符 DQUOTE = %x22 ; “ (Double Quote)，即 双引号 VCHAR = %x21-7E ; visible (printing) characters，即 可见字符 CHAR = %x01-7F ; any 7-bit US-ASCII character, excluding NUL，7位 OCTET = %x00-FF ; 8 bits of data，8位 CTL = %x00-1F / %x7F ; controls，即 控制字符 CR = %x0D ; carriage return，即 回车 LF = %x0A ; linefeed，即 换行 CRLF = CR LF ; Internet standard newline，即 互联网标准换行 DIGIT = %x30-39 ; 0-9 HEXDIG = DIGIT / “A” / “B” / “C” / “D” / “E” / “F” ;十六进制数字 (0-9, A-F, a-f) SP = %x20 ; 即 空行 HTAB = %x09 ; horizontal tab，即 横向制表符（Tab） WSP = SP / HTAB ; white space，即 空格或横向制表符 LWSP = *(WSP / CRLF WSP) ; 即 直线空白（晚于换行） 12下面是JAVA语言中For语句的定义：FOR_STATEMENT ::= \"for\" \"(\" ( variable_declaration | ( expression \";\" ) | \";\" ) [ expression ] \";\" [ expression ] \")\" statement B类B类字段主要包含一些经常使用的和比较关键的信息，以@符号为前缀 @marker 日志标识，可以理解为该条日志的业务说明，比如查询绑卡信息，订单入库结果等。204|2014-07-27 14:47:23,443|192.168.2.104|INFO|main|c.e.t.j.LogTest|20| {“TrackingID”:”TRADEENGINE_550e8400-e29b-41d4-a716-446655440000”,”marker”:”测试⽇志”,”otorder”:”2014072710234294234”} @ex 简单异常信息，当有异常抛出时使用204|2014-07-27 14:47:23,443|192.168.2.104|INFO|main|c.e.t.j.LogTest|20|{“TrackingID”:”TRADEENGINE_550e8400-e29b-41d4-a716-446655440000”,”marker”:”测试⽇志”,”ex”:”java.lang.RuntimeException:null”} @mobacc 手机号204|2014-07-27 14:47:23,443|192.168.2.104|INFO|main|c.e.t.j.LogTest|20|{“TrackingID”:”TRADEENGINE_550e8400-e29b-41d4-a716-446655440000”,”marker”:”测试⽇志”,”otorder”:”2014072710234294234”,”mobacc”:”18930572293”} 这里不在一一列举，根据业务需求，项目组内部规定字段。 配置 Conf在logback的appender中配置123&lt;encoder&gt; &lt;pattern&gt;%relative|%date|%X&#123;ip&#125;|%level|%thread|%logger&#123;0&#125;|%L|%m%n&lt;/pattern&gt;&lt;/encoder&gt; Note：ip需要先在程序里设置1MDC.put(\"ip\", InetAddress.getLocalHost().getHostAddress()); Check List 对于所有接口、方法或函数的入口或返回点，分别打印日志进行标识，并输出入口或返回点的所有参数。 为便于关联、定位分析日志，涉及参数或数据信息的日志输出行应有唯一标识号，标识号可以是订单号或各类流水号等。 在方法内的逻辑判断点，如if/else等条件判断点，必须打印日志进行标识，并在同一行内，输出所有参数 多线程应用应将同一个输出点的输出内容打印在同一行，便于后续查证。 如果捕获异常，要在日志输出中，将具体异常内容和相关参数一起打印出来。 在调用外部接口时，需在发起接口调用前和接口返回后，分别输出日志，并输出接口调用前和返回后的相关参数。 对外提供的服务或接口，应在被调用后，输出调用方的IP地址。 管理类应用如综管台、业管系统等，需将登录用户名在日志中进行输出。 涉及银行卡号、密码、身份证号等敏感信息的不允许在日志中进行输出，如确因业务或 查证需要必须输出到日志中的，需报研发中心安全管理员审核批准，并对敏感信息的中间部分数据位用类似***的掩码输出。 日志中输出的参数或数据之间，使用“|”符号作为分隔符。 对于日志的打印，任何情况下都不允许日志错误导致业务失败。 对于异常堆栈的输出，必须以log.XXX (“msg”,e)的形式输出，禁止log.XXX (“msg”+e)的错误形式。 对于由于系统原因造成业务处理失败的事件，需要记录错误日志。非系统原因的业务处理失败，不应该记错误日志（推荐使用warn级别），避免错误日志过大，影响紧急情况下的故障分析与诊断。 生产代码禁止以System及Throwable.printStackTrace的方式输出日志信息，必须用Logger替代。","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"编写自动化shell脚本 Oracle sql loader 导入数据","slug":"编写自动化shell脚本 Oracle sql loader 导入数据","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/编写自动化shell脚本 Oracle sql loader 导入数据.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/编写自动化shell脚本 Oracle sql loader 导入数据.html","excerpt":"编写自动化shell脚本 Oracle sql loader 导入数据需求 调度周期：日调度 数据源：ODS系统早8:00生成的文件推送到FTP服务器上 编写自动化shell脚本，使用crontab定时调度实现文件入库。 更新规则：全量更新 入库表名 慢必赔新装表（INF_MBP_DRX）慢必赔报障表（INF_MBP_DRZ） 准备工作调度服务器需要安装Oracle客户端，配置tns链接字符串，如下12345678EDWDB_NEW = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 137.32.61.13)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ODSDB) ) ) 调度服务器单独划分一块区域存储从FTP下载下来的数据文件和校验文件。文件存储路径 /data/manyidu/data1234567[root@server1 data]# df -hFilesystem Size Used Avail Use% Mounted on/dev/xvda3 128G 28G 94G 23% /tmpfs 4.9G 76K 4.9G 1% /dev/shm/dev/xvda1 194M 44M 140M 24% /boot/dev/mapper/vgdata-lvdata 148G 6.5G 134G 5% /data 文件服务器的网络环境要打通，网络环境配置。文件服务器IP：137.32.126.137用户名：zx_order密码：zxOrder_12 新建目录，存放脚本如下：1234567[root@server1 data]# tree -L 1 /home/oracle/manyidu/home/oracle/manyidu|-- ctl ##用于生成oracle控制文件|-- data ##用于存放下载文件，当然我们现在存储源文件是单独分区/data 这里就不用了|-- log ##输出日志的目录|-- run_log ##输出日志的目录|-- shell ##存放shell脚本的地方","text":"编写自动化shell脚本 Oracle sql loader 导入数据需求 调度周期：日调度 数据源：ODS系统早8:00生成的文件推送到FTP服务器上 编写自动化shell脚本，使用crontab定时调度实现文件入库。 更新规则：全量更新 入库表名 慢必赔新装表（INF_MBP_DRX）慢必赔报障表（INF_MBP_DRZ） 准备工作调度服务器需要安装Oracle客户端，配置tns链接字符串，如下12345678EDWDB_NEW = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 137.32.61.13)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ODSDB) ) ) 调度服务器单独划分一块区域存储从FTP下载下来的数据文件和校验文件。文件存储路径 /data/manyidu/data1234567[root@server1 data]# df -hFilesystem Size Used Avail Use% Mounted on/dev/xvda3 128G 28G 94G 23% /tmpfs 4.9G 76K 4.9G 1% /dev/shm/dev/xvda1 194M 44M 140M 24% /boot/dev/mapper/vgdata-lvdata 148G 6.5G 134G 5% /data 文件服务器的网络环境要打通，网络环境配置。文件服务器IP：137.32.126.137用户名：zx_order密码：zxOrder_12 新建目录，存放脚本如下：1234567[root@server1 data]# tree -L 1 /home/oracle/manyidu/home/oracle/manyidu|-- ctl ##用于生成oracle控制文件|-- data ##用于存放下载文件，当然我们现在存储源文件是单独分区/data 这里就不用了|-- log ##输出日志的目录|-- run_log ##输出日志的目录|-- shell ##存放shell脚本的地方 开始写脚本文件名：load_table_info_DR.sh123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124############################################################################################功能： 完成数据导入Oracle表中 #时间: 2013-08-18#作者： zhangls#参数： $1 表名 $2 批次号 传0 表示今天 -1表示昨天 1表示明天 以此类推#目标： 数据导入Oracle表############################################################################################!/bin/sh#配置环境变量export ORACLE_HOME=/home/oracle/app/oracle/product/10.2.0/client_1export TNS_ADMIN=$ORACLE_HOME/network/adminexport NLS_LANG=AMERICAN_AMERICA.ZHS16GBKexport LD_LIBRARY_PATH=$ORACLE_HOME/libexport PATH=$ORACLE_HOME/bin:$PATH#入参table_name=$1 #表名num_date=$2 #批次号echo \"程序开始:\"echo ===============================================echo \"开始时间：`date \\\"+%Y-%m-%d %H:%M:%S\\\"`\";## 定义日期及参数 today=`date +%Y%m%d` #今天echo today=$todaynumday=`date -d $num_date' days' +%Y%m%d` year_No=`expr substr $today 1 4` #年份2013#sleep 1echo \"the frist param of the script is :$1\"echo \"the numday of the value is: $numday\"echo ===============================================data_name = $table_name; #实际处理的表名v_opertion_day = $numday; #实际处理的批次号shell_path = /home/oracle/manyidu/shell;ctl_path = /home/oracle/manyidu/ctl;log_path = /home/oracle/manyidu/log;#下载FTP文件路径pa=/data/manyidu/datacd $paecho $pa#去远程FTP上下载文件echo $&#123;data_name&#125;---\"[`date`]获取文件开始\";lftp -u ods_jk,hnOds_jk12 ftp://137.32.126.137 &lt;&lt;EOF #登陆FTP服务器cd day/$&#123;v_opertion_day&#125; #进入批次号命名的文件夹mget $&#123;data_name&#125;_$&#123;v_opertion_day&#125;* #下载文件名匹配成功的文件到本地，注意本地路径bye #退出EOFecho $&#123;data_name&#125;---\"[`date`]获取文件完成\" ;# 接口方规定数据文件接口单表会生成两个文件 生成时间早8:00# 1.表名_批次号.dat （INF_MBP_DRZ_20180821.dat） 数据文件 每行是一条数据，数据项以\",\"分割 # 2.表名_批次号.flg （INF_MBP_DRZ_20180821.flg） 数据校验文件 # 校验文件规则 # [root@server1 data]# cat INF_MBP_DRZ_20180821.flg# INF_MBP_DRZ_20180821.dat 8403 25 2018-08-22 5:57:16# 对应的数据文件名 数据文件字节数 总条数 文件生成时间# 这里判断数据文件的行数小于1的话就直接退出，否则执行创建控制文件的shellif [ `ls $&#123;data_name&#125;_$v_opertion_day.dat | awk 'END&#123;print NR&#125;'` -lt 1 ] then exit EOFelse $shell_path/mkdir_$&#123;table_name&#125;_ctl.shell $&#123;data_name&#125; $&#123;v_opertion_day&#125;&gt; /dev/null echo \"生成控制文件完毕：`date \\\"+%Y-%m-%d %H:%M:%S\\\"`\"; ## 增加一个缓冲时间 sleep 4 #统计文件记录数作为比对依据 cd $pa FN=$(cat $&#123;data_name&#125;_$&#123;v_opertion_day&#125;.dat|wc -l) # 数据文件的条数 echo $&#123;data_name&#125;_$&#123;v_opertion_day&#125;.dat ----- $&#123;FN&#125; dbuser=manyidu dbconn=manyidu/manyidu_256@newedw #删除现有数据库中表数据，因为是全量抽取 sqlplus $&#123;dbconn&#125; &lt;&lt; SQLEND delete from TI_$&#123;table_name&#125; where opertion_date='$&#123;v_opertion_day&#125;'; commit; SQLEND echo =============================================== sqlldr $&#123;dbconn&#125; control=$ctl_path/$&#123;table_name&#125;.ctl errors = 1000 bad=$log_path/$&#123;table_name&#125;.bad log=$log_path/$&#123;table_name&#125;.log rows=30000 direct = true bindsize=10485760 echo $&#123;table_name&#125;==========='导入成功' #登陆执行 分析脚本 sqlplus $&#123;dbconn&#125; &lt;&lt; SQLEND exec dbms_stats.gather_table_stats(ownname=&gt;'$&#123;dbuser&#125;',tabname=&gt;'TI_$&#123;table_name&#125;',estimate_percent=&gt;20,degree =&gt; 4,cascade=&gt; TRUE); SQLEND echo \"执行时间 [`date`] \"; #登陆执行 sqlplus $&#123;dbconn&#125;&lt;&lt; SQLEND insert into etl_check_data_info ( V_ID, v_table_name, datafile_cnt, # 数据接口文件的数据量 table_cnt, # 加载入库的数据量 load_date, opertion_date, remarks #数据量差异 差异为0 正常，其他都不正常需要稽核数据 ) select SEQ_ETL_CHECK_DATA_INFO.Nextval, '$&#123;table_name&#125;', '$&#123;FN&#125;', (select count(0) from ti_$&#123;table_name&#125; where opertion_date='$&#123;v_opertion_day&#125;'), sysdate, '$v_opertion_day', (select count(0) from ti_$&#123;table_name&#125; where opertion_date='$&#123;v_opertion_day&#125;')-'$&#123;FN&#125;' from dual; SQLEND echo \"[`date`] 插入日志表完成！\" echo =============================================== fiecho $&#123;table_name&#125; \"[`date`] 整体完成日志！\" # rm /data/manyidu/data/$&#123;data_name&#125;_$&#123;v_opertion_day&#125;*# echo /data/manyidu/data/$&#123;data_name&#125;_$&#123;v_opertion_day&#125;*# echo $&#123;table_name&#125; \"[`date`] 清除三天前记录！\"exit 创建生成控制文件的脚本脚本名称 mkdir_${table_name}_ctl.shell， 示例表名INF_MBP_DRX在路径/home/oracle/manyidu/shell 新建mkdir_INF_MBP_DRX_ctl.shell 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253############################################################################################功能： 完成表名INF_MBP_DRX接口控制文件生成 #时间: 2013-08-18 #作者： zhangls#参数： $1 表名 $2 批次号#目标： 按照日期生成文件 ############################################################################################!/bin/shdata_name=$1opertion_day=$2echo ===============================================echo \"生成配置文件....\"cd /home/oracle/manyidu/ctladdress='\"'/data/manyidu/data/$&#123;data_name&#125;_$&#123;opertion_day&#125;'\"' parameter='\"','\"'echo -e \"load data infile $addressAPPEND INTO table TI_$&#123;data_name&#125;fields terminated by $parameter( cityname , exchname , orgname , personname , accnbr , contact_name , birthday , gender , menbership_name , contact_tel , fix_addr , innet_date , access_type , prod_offer_name , is_rh_flag , std_min_consume , std_bandwidth , is_itv_flag , order_title , external_no , channel , applicator , applicator_tel , accept_date , ispretend , esp_date , changedate , finishdate , payvalue , OPERTION_DATE constant \\\"$opertion_day\\\")\" &gt; $&#123;data_name&#125;.ctl exit 配置调度crontab[root@server1 ~]# crontab -e123*/1 * * * * ntpdate 137.32.44.178 时间同步服务器50 7-11 * * * nohup /home/oracle/manyidu/shell/load_table_INF_MBP_DR.sh INF_MBP_DRX 0 &gt; /home/oracle/manyidu/run_log/INF_MBP_DRX.log &amp;50 7-11 * * * nohup /home/oracle/manyidu/shell/load_table_INF_MBP_DR.sh INF_MBP_DRZ 0 &gt; /home/oracle/manyidu/run_log/INF_MBP_DRZ.log &amp; 配置规则为 早上7点到11点钟 每到50分钟的时候调用一次即 7:50 8:50 9:50 10:50 11:50 触发调度 编写总调度shell如果同步的表比较多可以写个总调度的shell 文件名：load_control.sh123456789101112131415161718192021222324252627282930#!/bin/shdate \"+%Y%m%d\"v_day=$(date \"+%Y%m%d\")shell_path = /home/oracle/manyidu/shell;log_path = /home/oracle/manyidu/run_log;export ORACLE_HOME=/home/oracle/app/oracle/product/10.2.0/client_1export TNS_ADMIN=$ORACLE_HOME/network/adminexport NLS_LANG=AMERICAN_AMERICA.ZHS16GBKexport LD_LIBRARY_PATH=$ORACLE_HOME/libexport PATH=$ORACLE_HOME/bin:$PATHecho \"开始时间：`date \\\"+%Y-%m-%d %H:%M:%S\\\"`\";nohup $shell_path/load_table_info_DR.sh TI_BD_MSG_moble_resp 0 &gt; $log_path/INF_TI_BD_MSG_MOBLE_RESP.log &amp;nohup $shell_path/load_table_info_DR.sh TI_BD_STAFF_ORG 0 &gt; $log_path/INF_TI_BD_STAFF_ORG.log &amp;nohup $shell_path/load_table_info_DR.sh TI_BD_ORDER_CODE_INFO 0 &gt; $log_path/INF_TI_BD_ORDER_CODE_INFO.log &amp;nohup $shell_path/load_table_info_DR.sh TI_BD_Fault_ORDER_INFO 0 &gt; $log_path/INF_TI_BD_Fault_ORDER_INFO.log &amp;nohup $shell_path/load_table_info_DR.sh TI_BD_MSG_TELE_RESP 0 &gt; $log_path/INF_TI_BD_MSG_TELE_RESP.log &amp;nohup $shell_path/load_table_info_DR.sh TI_BD_MSG_TELE_SEND 0 &gt; $log_path/INF_TI_BD_MSG_TELE_SEND.log &amp;#nohup $shell_path/load_table_info_DR.sh TI_BD_MSG_MOBILE_SEND 0 &gt; /home/oracle/manyidu/run_log$log_path/INF_TI_BD_MSG_MOBILE_SEND.log &amp;echo \"结束时间：`date \\\"+%Y-%m-%d %H:%M:%S\\\"`\";","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]},{"title":"项目中代码评审的标准及要点项","slug":"项目中代码评审的标准及要点项","date":"2019-09-10T02:53:38.956Z","updated":"2019-09-10T02:53:38.956Z","comments":true,"path":"2019/09/10/项目中代码评审的标准及要点项.html","link":"","permalink":"http://zhanglingsi.github.io/2019/09/10/项目中代码评审的标准及要点项.html","excerpt":"项目中代码评审的标准及要点项常规检查命名、注释、声明1. 命名规则是否与所采用的规范保持一致？ 2. has/can/is前缀的函数是否返回布尔型？ 3. 注释是否较清晰 4. 复杂的分支流程是否已经被注释 5. 函数是否已经有文档注释 6. 变量是否已经在定义的同时初始化 7. 类属性是否都执行了初始化 语句、功能分布、规模1. 单个函数是否执行了单个功能并与其命名相符 2. 单个函数不超过规定行数（不要超过14行） 3. 缩进层数是否不超过规定","text":"项目中代码评审的标准及要点项常规检查命名、注释、声明1. 命名规则是否与所采用的规范保持一致？ 2. has/can/is前缀的函数是否返回布尔型？ 3. 注释是否较清晰 4. 复杂的分支流程是否已经被注释 5. 函数是否已经有文档注释 6. 变量是否已经在定义的同时初始化 7. 类属性是否都执行了初始化 语句、功能分布、规模1. 单个函数是否执行了单个功能并与其命名相符 2. 单个函数不超过规定行数（不要超过14行） 3. 缩进层数是否不超过规定 可靠性（变量、语句）1. 是否已经消除了所有警告 2. 常数变量是否声明为final 3. 对象使用前是否进行了检查 4. 局部对象变量使用后是否被复位为NULL 5. 是否确认没有同名变量局部重复定义问题 6. 所有判断是否都使用了（常量==变量）的形式 7. 是否每个if-else if-else语句都有最后一个else以确保处理了全集 8. 对浮点数值的相等判断是否是恰当的？（严禁使用==直接判断） 可靠性（函数）1. 入口对象是否都被进行了判断不为空 2. 入口数据的合法范围是否都被进行了判断？(尤其是数组) 3. 是否对有异常抛出的方法都执行了try...catch保护？ 4. 是否函数的所有分支都有返回值？ 5. 是否对方法返回值对象做了null检查，该返回值定义时是否被初始化? 6. 是否对同步对象的遍历访问做了代码同步 7. 是否确认在对Map对象使用迭代遍历过程中没有做增减元素操作 8. 线程处理函数循环内部是否有异常捕获处理，防止线程抛出异常而退出 9. 函数对错误的处理是恰当的 可维护性1. 实现代码中是否消除了直接常量？（用于计数起点的简单常数例外） 日志输出1. 对于所有接口、方法或函数的入口或返回点，分别打印日志进行标识，并输出入口或返回点的所有参数。 2. 为便于关联、定位分析日志，涉及参数或数据信息的日志输出行应有唯一标识号，标识号可以是订单号或各类流水号等 3. 在方法内的逻辑判断点，如if/else等条件判断点，必须打印日志进行标识，并在同一行内，输出所有参数 4. 多线程应用应将同一个输出点的输出内容打印在同一行，便于后续查证 5. 如果捕获异常，要在日志输出中，将具体异常内容和相关参数一起打印出来 6. 在调用外部接口时，需在发起接口调用前和接口返回后，分别输出日志，并输出接口调用前和返回后的相关参数 7. 对外提供的服务或接口，应在被调用后，输出调用方的IP地址 8. 管理类应用如综管台、业管系统等，需将登录用户名在日志中进行输出。 9. 涉及银行卡号、密码、身份证号等敏感信息的不允许在日志中进行输出，如确因业务或查证需要必须输出到日志中的，需报研发中心安全管理员审核批准，并对敏感信息的中间部分数据位用类似***的掩码输出 10. 涉及银行卡号、密码、身份证号等敏感信息的不允许在日志中进行输出，如确因业务或查证需要必须输出到日志中的，需报研发中心安全管理员审核批准，并对敏感信息的中间部分数据位用类似***的掩码输出 代码审核 checklist1. 硬编码 （不变更的内容放置在配置文件或常量类中） 2. 方法命名随意 （贴切功能） 3. 注释不清楚 （class注释，函数注释，变量注释） 4. 日志输出，级别定义 （错误信息用error,基本信息用debug，稳定之后可以不需要再打印。需要查证信息用Info。前端接入模块，每行日志输出都必须加上订单号和订单请求流水号。银行模块，每行日志都必须加上平台流水和银行请求流水。业务模块，每行日志都必须加上平台流水和业务请求流水。 其它模块，每行日志加上平台流水。） 5. 工具类重复制造 （common中的工具类，以及开源工具类） 6. 简化if结构 （if中判断失败结果，成功不需要else） 7. 静态块的走查 （静态变量，静态方法使用） 8. response对象使用 （模块之间的调用返回此对象。issuccess成功，里面的范型必须有值） 9. 异常处理 （每个模块的入口去捕获异常，模块内的调用不去try，catch，直接抛给入口。函数内有调用外部接口时，需要try，catch。） 代码评审意见稿 评审内容 评审人员 时间 审核问题 解决方案 遗留问题 工单号+业务名称 张三，李四等 2018-08-18 1:硬编码2:方法命名随意3:注释不够详细4:日志输出没有依据,无法给运维人员很好查找错误5:工具类重复制造 空 异常机制建立，错误码规范","categories":[{"name":"编程","slug":"programming","permalink":"http://zhanglingsi.github.io/categories/programming/"}],"tags":[]}]}